---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Treaty subcondition.
-- Handles treaty functionality and all asociated events invokes.
-- Creates cease fire at the start of the game.
-- TODO PRETREATY OVER ENDGAME CHECKS
---------------------------------------------------------------------------------------------------

AGS_TREATY_MODULE = "AGS_Treaty"
AGS_TREATY_OBJECTIVE = nil
AGS_TREATY_TIMER = "AGS_TreatyTimer"
AGS_TREATY_PEACE_TIME = 0 * 60
AGS_TREATY_TIMER_TICK = 1.0

AGS_TREATY_START = 0
AGS_TREATY_THRESHOLD = 60.0
AGS_TREATY_INTERVAL = 60.0
AGS_TREATY_DURATION = 0

AGS_TREATY_EVENTCUE = {
	sfx_treaty_timer_first = "sfx_ui_victory_countdown_update_first",
	sfx_treaty_timer_final = "sfx_ui_victory_countdown_update_final",
}

function AGS_Treaty_ShowTimer(minutes_remaining)
	local cue = AGS_TREATY_EVENTCUE.cueCountdown
	local uiColour = Player_GetUIColour(Game_GetLocalPlayer())
	cue.title = Loc_FormatText("$64c5019a145c4e4da448dbd3adeea61e:232", minutes_remaining)			
	cue.sfx = AGS_TREATY_EVENTCUE.sfx_treaty_timer_first
	Rule_AddOneShot(AGS_Treaty_CreateEventCue, 0, 
		{ title = cue.title, queue_icon = "", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})	
end

function AGS_Treaty_EndTimer()
	local cue = AGS_TREATY_EVENTCUE.cueCountdown
	local uiColour = Player_GetUIColour(Game_GetLocalPlayer())
	cue.title = Loc_FormatText("$64c5019a145c4e4da448dbd3adeea61e:233")			
	cue.sfx = AGS_TREATY_EVENTCUE.sfx_treaty_timer_final
	Rule_AddOneShot(AGS_Treaty_CreateEventCue, 0, 
		{ title = cue.title, queue_icon = "", sfx = cue.sfx, uiColour = uiColour, highPriority =  true})	
end

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_TREATY_MODULE)	

function AGS_Treaty_UpdateModuleSettings()
	AGS_Print("AGS_Treaty_UpdateModuleSettings")
	if AGS_GLOBAL_SETTINGS.Treaty == 0 then
		Core_UnregisterModule(AGS_TREATY_MODULE)
	end
	AGS_TREATY_TIMER = AGS_GLOBAL_SETTINGS.Treaty * 60
end

function AGS_Treaty_OnPlay()
	AGS_Print("AGS_Treaty_OnPlay")
	AGS_Treaty_InitializePeacetime()
	Rule_AddInterval(AGS_Treaty_OnTimerTick, AGS_TREATY_TIMER_TICK)
	AGS_Score_CreateObjective()
	AGS_Score_UpdateObjective()
end

function AGS_Treaty_OnGameOver()
	AGS_Print("AGS_Treaty_OnGameOver")
	AGS_Treaty_InitializePeacetime()
	Rule_AddInterval(AGS_Treaty_OnTimerTick, AGS_TREATY_TIMER_TICK)
	AGS_Score_CreateObjective()
	AGS_Score_UpdateObjective()
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------

function AGS_Treaty_InitializePeacetime()
	
end

function AGS_Score_CreateObjective()
	AGS_TREATY_OBJECTIVE = AGS_Objectives_Create(AGS_OBJECTIVES_TREATY, AGS_GS_LOCAL_PLAYER)
	AGS_Objectives_Set(AGS_TREATY_OBJECTIVE, OS_Incomplete, true, true, COUNTER_TimerDecreasing)
end

function AGS_Treaty_UpdateObjective()
	AGS_Objectives_Progress(
		AGS_TREATY_OBJECTIVE, 
		nil,
		nil,
		nil,
		Timer_GetRemaining(AGS_TREATY_TIMER)
	)
end

function AGS_Score_RemoveObjective()
	AGS_Objectives_Set(AGS_TREATY_OBJECTIVE, nil, false)
end




function AGS_Treaty_Create(treaty_duration)
	-- Start tracking time.
	AGS_TREATY_START = World_GetGameTime()
	AGS_TREATY_DURATION = treaty_duration * 60.0 --minutes to seconds
	
	-- Disables fighting between players via diplomacy.	
	Diplomacy_AllPlayer_SaveAndChangeToFriends()
	Diplomacy_OverrideAllPlayerDiplomacySettings(AGS_GLOBAL_SETTINGS.Tributes, false)
	
	-- Notify everyone of treaty rules are in place.	
	Core_CallDelegateFunctions("TreatyStarted")
	
	-- Start countdown.
	Rule_Add(AGS_Treaty_Countdown)
	-- Show timer cue.
	AGS_Treaty_ShowTimer(treaty_duration)
end

function AGS_Treaty_Countdown()	
	local world_time = World_GetGameTime()
	-- if enough time passed end all treaties
	if world_time - AGS_TREATY_START >= AGS_TREATY_DURATION then
		AGS_Treaty_End()
	-- everytime threshold is reached we will inform players that one minute passed, in all cases other than final minute passed as that is moment of start
	elseif world_time - AGS_TREATY_START >= AGS_TREATY_THRESHOLD then 
		local minutes_remaining = math.floor((AGS_TREATY_DURATION - (world_time - AGS_TREATY_START)) / 60)
		AGS_Treaty_ShowTimer(minutes_remaining)
		-- define next threshold
		AGS_TREATY_THRESHOLD = AGS_TREATY_THRESHOLD + AGS_TREATY_INTERVAL		
	end	
end

function AGS_Treaty_End()
	if Rule_Exists(AGS_Treaty_Countdown) then	
		-- End countdown.
		Rule_Remove(AGS_Treaty_Countdown)
		-- Show timer ended cue.
		AGS_Treaty_EndTimer()	
		
		Diplomacy_AllPlayer_LoadFromSave()
		Diplomacy_OverrideAllPlayerDiplomacySettings(AGS_GLOBAL_SETTINGS.Tributes, AGS_GLOBAL_SETTINGS.Diplomacy)
		-- Notify everyone of treaty rules ended.	
		Core_CallDelegateFunctions("TreatyEnded")		
	end
end