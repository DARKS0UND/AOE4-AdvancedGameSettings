---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Conquest win condition.
-- A team is eliminated when all of its players have lost all their landmarks (including capital town center).
-- The last team remaining is the victor.
---------------------------------------------------------------------------------------------------

AGS_CONQUEST_MODULE = "AGS_Conquest"
AGS_CONQUEST_OBJECTIVE = nil
AGS_CONQUEST_ACTIVE_CHECKS = true
AGS_CONQUEST_PLAYERS_MIN_REQUIRED = 2
AGS_CONQUEST_TICK_WAIT = 0.25 -- 0.125 is a single tick
-- player.landmarks
AGS_CONQUEST_DAMAGE_INTERVAL = 30.0

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_CONQUEST_MODULE)	

function AGS_Conquest_UpdateModuleSettings()
	if not AGS_GLOBAL_SETTINGS.Conquest or #PLAYERS <= AGS_CONQUEST_PLAYERS_MIN_REQUIRED then
		Core_UnregisterModule(AGS_CONQUEST_MODULE)
	end
end

function AGS_Conquest_Start()
	AGS_Conquest_InitializeTargetCollection()
	AGS_Conquest_StartProgressTracking()
	AGS_Conquest_CreateObjective()
	AGS_Conquest_UpdateObjective()
end

function AGS_Conquest_OnPlayerDefeated(player, reason)
	if reason == AGS_WR_CONQUEST then 
		AGS_Conquest_Notification(player)
		AGS_Conquest_CheckVictory()
	end
end

function AGS_Conquest_TreatyStarted()
	AGS_CONQUEST_ACTIVE_CHECKS = false
end

function AGS_Conquest_TreatyEnded()
	AGS_CONQUEST_ACTIVE_CHECKS = true
end

-- Update objectives when player added to team or relationship changed. Might be enough for RC.
function AGS_Conquest_OnPlayerJoinedTeam(playerData)
	AGS_Conquest_UpdateObjective()
end
function AGS_Conquest_OnRelationshipChanged(observer_id, target_id)
	AGS_Conquest_UpdateObjective()
end

function AGS_Conquest_OnGameOver()
	AGS_Conquest_RemoveObjective()
	AGS_Conquest_StopProgressTracking()
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------

function AGS_Conquest_StartProgressTracking()
	Rule_AddGlobalEvent(AGS_Conquest_OnConstructionComplete, GE_ConstructionComplete)
	Rule_AddGlobalEvent(AGS_Conquest_OnDamageReceived, GE_DamageReceived)
	Rule_AddGlobalEvent(AGS_Conquest_OnEntityKilled, GE_EntityKilled)
	Rule_AddGlobalEvent(AGS_Conquest_OnEntityLandmarkDestroyed, GE_EntityLandmarkDestroyed)
end

function AGS_Conquest_StopProgressTracking()
	Rule_RemoveGlobalEvent(AGS_Conquest_OnConstructionComplete)
	Rule_RemoveGlobalEvent(AGS_Conquest_OnDamageReceived)
	Rule_RemoveGlobalEvent(AGS_Conquest_OnEntityKilled)
	Rule_RemoveGlobalEvent(AGS_Conquest_OnEntityLandmarkDestroyed)
end

function AGS_Conquest_CreateObjective()
	local player_id = Game_GetLocalPlayer()
	local player_civ = Player_GetRaceName(player_id)
	AGS_CONQUEST_OBJECTIVE = AGS_CreateObjective(AGS_OBJECTIVE_CONQUEST, player_id, player_civ)
	AGS_SetObjective(AGS_CONQUEST_OBJECTIVE, OS_Incomplete, true, true, COUNTER_CountUpTo)
end
-- Updates objective.
function AGS_Conquest_UpdateObjective()
	local localPlayer = Core_GetPlayersTableEntry(Game_GetLocalPlayer())	
	local enemies_landmarks = AGS_Conquest_GetEnemyLandmarkCount(localPlayer)
	-- Update the progress bar of the objective.
	AGS_SetObjectiveProgress(
		AGS_CONQUEST_OBJECTIVE, 
		enemies_landmarks.destroyed, 
		enemies_landmarks.built, 
		enemies_landmarks.destroyed / enemies_landmarks.built
	)
end
-- Remove will just hide it, this should be enough.
function AGS_Conquest_RemoveObjective()
	AGS_SetObjective(AGS_CONQUEST_OBJECTIVE, nil, false, nil, nil)	
end
-- Check if there is single remaining allied group.
function AGS_Conquest_CheckVictory()
	if not AGS_CONQUEST_ACTIVE_CHECKS then
		return
	end
	
	local winners = AGS_DoesWinnerGroupExists()
	if winners == nil then
		return
	end
	
	for _, winner_id in pairs(winners) do 
		AGS_SetPlayerVictorious(winner_id, AGS_Conquest_WinnerPresentation, AGS_WR_CONQUEST)
	end
	
	AGS_EndGame()
end


function AGS_Conquest_WinnerPresentation(player_id)
	AGS_Presenation(player_id, AGS_WINNER_VICTORY)
	AGS_SetEndGameState(AGS_CONQUEST_OBJECTIVE, false, OS_Complete, MUS_STING_PRIMARY_OBJ_COMPLETE_ENDGAME)
	AGS_Conquest_RemoveObjective()
end

function AGS_Conquest_LoserPresenation(player_id)
	if AGS_LoserPresenation(player_id, AGS_LOOSER_DEFEAT, AGS_LOOSER_ELIMINATED) then
		AGS_SetEndGameState(AGS_CONQUEST_OBJECTIVE, false, OS_Failed, MUS_STING_PRIMARY_OBJ_FAIL)
	else
		AGS_SetEndGameState(AGS_CONQUEST_OBJECTIVE, false, OS_Failed, MUS_STING_PRIMARY_OBJ_FAIL)
		AGS_Conquest_RemoveObjective()
	end	
end

function AGS_Conquest_OnEntityKilled(context)
	if context.victimOwner == nil or context.victim == nil then
		return
	end
	local player = Core_GetPlayersTableEntry(context.victimOwner)
	local entity_id = context.victim
	AGS_Conquest_UpdatePlayer(player, entity_id)
end
function AGS_Conquest_OnEntityLandmarkDestroyed(context)
	if context.landmarkOwner == nil or context.landmarkEntity == nil then
		return
	end
	local player = Core_GetPlayersTableEntry(context.landmarkOwner)
	local entity_id = context.landmarkEntity
	AGS_Conquest_UpdatePlayer(player, entity_id)
end
	
function AGS_IsObjectiveTarget(entity_id)
	return AGS_IsACapital(entity_id) or AGS_IsALandmark(entity_id) -- or AGS_IsAWonder(entity_id)
end

function AGS_Conquest_OnConstructionComplete(context)
	if context == nil or context.player == nil or context.entity == nil then 
		return
	end
	
	local new_context = {
		player = Core_GetPlayersTableEntry(context.player),
		entity_id = context.entity,
		entity_uwid = Entity_GetID(context.entity),
	}
	
	if new_context.player == nil or new_context.entity_uwid == nil or player.isEliminated then
		return
	end
	
	if AGS_IsObjectiveTarget(new_context.entity_id) then
		-- Delay processing this event by two frames so deferred data model updates can complete. 
		Rule_AddOneShot(AGS_Conquest_OnPostConstructionComplete, AGS_CONQUEST_TICK_WAIT, new_context)	
	end
end

function AGS_Conquest_InitializeTargetCollection()
	for _, player in pairs(PLAYERS) do
		player.landmarks = {}
		local eg_player_landmarks = Player_GetAllEntities(player.id)
		
		EGroup_Filter(eg_player_landmarks, { AGS_BP_LANDMARK }, FILTER_KEEP)
		
		local AGS_TrackLandmark = function(gid, idx, eid)
			local entity_uwid = Entity_GetID(eid)
			-- Track entity UWIDs.
			if AGS_IsObjectiveTarget(eid) and player.landmarks[entity_uwid] == nil then				
				player.landmarks[entity_uwid] = {
					entity = eid,
					damage_timer = string.format("conquest.landmark_damage_timer_%d", entity_uwid),
					landmark_active = Entity_IsValid(entity_uwid) and Entity_GetStateModelBool(eid, "landmark_active"),
					-- is_a_capital = AGS_IsACapital(eid), -- irrelevant on 99%
					last_attacker = nil
				}
			end
		end
		
		-- Try add found entities to a table.
		EGroup_ForEach(eg_player_landmarks, AGS_TrackLandmark)
	end
end

function AGS_Conquest_OnPostConstructionComplete(context, data)
	-- Track entity UWIDs since Mongol structures trigger a GE_ConstructionComplete event when unpacked as well as when constructed.
	if player.landmarks[data.entity_uwid] ~= nil then
		return
	end
	-- Save structure in tracker list for a player.
	data.player.landmarks[entity_uwid] = {
		entity = data.entity_id,
		damage_timer = string.format("conquest.landmark_damage_timer_%d", data.entity_uwid),
		landmark_active = Entity_IsValid(data.entity_uwid) and Entity_GetStateModelBool(data.entity_id, "landmark_active"),
		-- is_a_capital = AGS_IsACapital(data.entity_id), -- irrelevant on 99%
		last_attacker = nil
	}	
	AGS_Conquest_UpdateObjective()
end

function AGS_Conquest_OnDamageReceived(context)
	-- Excludes razing buildings as they do not have an attacker ?
	if context == nil or context.attacker == nil or context.victim == nil then 
		return 
	end
	-- Builder and attacker can't be world owned. Why ?
	if World_OwnsEntity(context.victim) or World_OwnsEntity(context.attacker) then
		return
	end
	-- Excludes everythng that is not tracked by wincondition.
	if not AGS_IsObjectiveTarget(context.victim) then
		return
	end	
	-- Exclude scuttling of incomplete buildings.
	if Entity_IsBuilding(context.victim) and Entity_GetBuildingProgress(context.victim) < 1.0 then
		return
	end	
	-- Get building ID and owner
	local entity_uwid = Entity_GetID(context.victim)
	local owner = Core_GetPlayersTableEntry(Entity_GetPlayerOwner(context.victim))
	-- Owner must always have this landmark registered for us to do anything with it ?
	if owner.landmarks[entity_uwid] == nil then
		return
	end
	-- If Landmark is being repaired (also triggers OnDamageReceived)
	if context.isRepairing then		
		-- If inactive Landmark is fully repaired
		if Entity_GetHealthPercentage(context.victim) == 1 and owner.landmarks[entity_uwid].landmark_active == false then			
			-- Track Landmark as active
			owner.landmarks[entity_uwid].landmark_active = true			
		end		
		return		
	end
	-- If player destroyed own building do not notify him. TODO This needs to fire for other !
	--if context.attacker == context.victim then
	--	return						
	--end
	-- No notifications for eliminated player.
	if Core_IsPlayerEliminated(Game_GetLocalPlayer()) then
		return
	end
	-- Notifications are done only about alive players and standing landmarks.
	if not Core_IsPlayerEliminated(owner.id) and Entity_GetStateModelBool(Entity_FromID(entity_uwid), "landmark_active") then
		AGS_Conquest_DamageNotification(context, owner, entity_uwid)	
	end
end

AGS_CUE_LANDMARK_DAMAGE = {	
	eventType = -1,	
	-- should match the defaults set in AE under tuning.ui.event_cues
	lifetime = 10.0,		
	repeatCount = 0,
	-- should match the defaults set in AE under tuning.ui.event_cues
	repeatTime = 20.0,		
	title = Loc_Empty(),
	desc = Loc_Empty(),
	sfx = "mus_stinger_landmark_building_damaged",
	icon = "icons\\event_queue_high_priority",
	icon_high_priority = "icons\\event_queue_high_priority_large",
	color = {r = 255, g = 255, b = 255, a = 255},
	--template = "high_priority", 
	template = "event_with_player_color",
	style = ECV_Queue | ECV_Title,
}

function AGS_Conquest_DamageNotification(context, owner, entity_uwid)
	-- Store last attacker in landmark data.
	owner.landmarks[entity_uwid].last_attacker = Entity_GetPlayerOwner(context.attacker)
	-- If attacking player is local player or his ally do nothing.
	if owner.landmarks[entity_uwid].last_attacker.isLocal or AGS_IsMutualRelation(Game_GetLocalPlayer(), owner.landmarks[entity_uwid].last_attacker, R_ALLY) then
		return
	end
	
	-- Timer is in progress.
	if Timer_Exists(owner.landmarks[entity_uwid].damage_timer) and Timer_GetRemaining(owner.landmarks[entity_uwid].damage_timer) > 0.0 then
		return
	end
	-- If timer does not exists this will create it for selected entity and start next countdown.
	Timer_Start(owner.landmarks[entity_uwid].damage_timer, AGS_CONQUEST_DAMAGE_INTERVAL)	
	
	-- Create cue.
	local uiColour = Player_GetUIColour(owner.landmarks[entity_uwid].last_attacker)
	local title = nil
	local high_priority = true
	-- Notify owner.
	if owner.isLocal then
		title = AGS_FormatText(AGS_CUE_TITLE_LANDMARK_A_SELF_ID)
	-- Notify his ally.
	elseif AGS_IsMutualRelation(Game_GetLocalPlayer(), owner.id, R_ALLY) then
		title = AGS_FormatText(AGS_CUE_TITLE_LANDMARK_A_TEAM_ID, owner.playerName)	
		high_priority = false
	end	
	if title ~= nil then
		-- TODO DELAY IF AND BODY ? BY AGS_EVENT_CUE_DELAY see Conquest_CreateEventCue
		if not Core_IsPlayerEliminated(Game_GetLocalPlayer()) then
			AGS_CreateCueComplex(AGS_CUE_LANDMARK_DAMAGE, high_priority, title, uiColour)
		end
	end
end

---------------------------------------------------------------------------------------------------
-- Conquest Checks:
---------------------------------------------------------------------------------------------------
-- Returns number of Landmarks a player has built/remaining.
-- player_landmarks is used to add count to already existing structure. Can be nil if you want new count.
function AGS_Conquest_GetPlayerLandmarkCount(player, player_landmarks)
	if player_landmarks == nil then
		player_landmarks = {
			built = 0,
			remaining = 0,
			destroyed = 0,
		}	
	end
	-- For every player count active and built Landmark.
	for id, landmark in pairs(player.landmarks) do
		player_landmarks.built = player_landmarks.built + 1
		if Entity_IsValid(id) then
			if Entity_GetStateModelBool(Entity_FromID(id), "landmark_active") then 
				player_landmarks.remaining = player_landmarks.remaining + 1
			else 
				player_landmarks.destroyed = player_landmarks.destroyed + 1
			end
		end
	end	
	return player_landmarks	
end

-- Returns number of Allied Landmarks standing for a given player (including given player).
function AGS_Conquest_GetAllyLandmarkCount(player)
	local landmark_counter = AGS_Conquest_GetPlayerLandmarkCount(player, nil)
	for _, allies in pairs(AGS_GetFriendlyAlivePlayers(player.id)) do 
		landmark_counter = AGS_Conquest_GetPlayerLandmarkCount(allies, landmark_counter)
	end
	return landmark_counter
end

-- Returns number of Enemy Landmarks standing for a given player.
function AGS_Conquest_GetEnemyLandmarkCount(player)
	local landmark_counter = nil
	for _, enemies in pairs(AGS_GetHostileOrNeutralAlivePlayers(player.id)) do 
		landmark_counter = AGS_Conquest_GetPlayerLandmarkCount(enemies, landmark_counter)
	end
	return landmark_counter
end

-- Returns number of enemies remaining for a given player
function AGS_Conquest_GetActiveEnemyCount(player)
	return #AGS_GetHostileOrNeutralAlivePlayers(player.id)
end

function AGS_Conquest_UpdatePlayer(player, entity_id)
	-- Check if we received entity that we are actively tracking.
	if not Entity_HasBlueprint(entity_id, AGS_BP_BUILDING) or not AGS_IsObjectiveTarget(entity_id) then
		return
	end		
	
	local entity_uwid = Entity_GetID(entity_id)
	
	-- Update player landmark status for this non-eliminated player, 
	-- if that landmark is already tracked due to being built completely at least once.
	if player ~= nil and not Core_IsPlayerEliminated(player.id) and player.landmarks[entity_uwid] ~= nil then
		player.landmarks.landmark_active = false		
		-- Notify players about landmark destroyed.
		AGS_Conquest_DestructionNotification(player, player.landmarks[entity_uwid])
		-- Update objective as we changed at least one condition target.
		AGS_Conquest_UpdateObjective()	
		
		-- Verify that this player is still able to continue in his conquest.
		local landmarks_count = AGS_Conquest_GetPlayerLandmarkCount(player, nil)
		-- First check might be redundant as we are not allowed in without dealing with built landmark.
		if landmarks_count.built > 0 and landmarks_count.remaining == 0 then
			AGS_Conquest_KillPlayer(player)
		end
	end	
end

function AGS_Conquest_KillPlayer(player)
	Player_SetStateModelBool(player.id, "disable_landmark_rebuild", true)
	for _, landmark in pairs(player.landmarks) do 
		Entity_Kill(landmark.entity)
	end	
	AGS_SetPlayerDefeated(player.id, AGS_Conquest_LoserPresentation, AGS_WR_CONQUEST)	
end

AGS_CUE_LANDMARK_KILLED = {	
	eventType = -1,	
	-- should match the defaults set in AE under tuning.ui.event_cues
	lifetime = 10.0,		
	repeatCount = 0,
	-- should match the defaults set in AE under tuning.ui.event_cues
	repeatTime = 20.0,		
	title = Loc_Empty(),
	desc = Loc_Empty(),
	sfx = "mus_stinger_landmark_building_damaged",
	icon = "icons\\event_queue_high_priority",
	icon_high_priority = "icons\\event_queue_high_priority_large",
	color = {r = 255, g = 255, b = 255, a = 255},
	--template = "high_priority", 
	template = "event_with_player_color",
	style = ECV_Queue | ECV_Title,
}

function AGS_Conquest_DestructionNotification(player, landmark)
	-- Show notification only if this player is still in the game.
	local player_local = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
	if player_local.isEliminated then 
		return
	end
	-- Leave cue if we dont have information about attacker. 
	if landmark.last_attacker == nil then
		return
	end
	
	local title = nil
	local uiColour = Player_GetUIColour(landmark.last_attacker)	
	local sfx = nil
	local high_priority = true
	-- Local player lost landmark
	if player == player_local then
		title = AGS_CUE_TITLE_LANDMARK_K_SELF_ID 	
		sfx = "mus_stinger_players_landmark_destroyed"
	-- Ally lost landmark
	elseif AGS_IsMutualRelation(player.id, player_local.id, R_ALLY) then
		title = AGS_FormatText(AGS_CUE_TITLE_LANDMARK_K_TEAM_ID, player.playerName) 	
		sfx = "mus_stinger_ally_landmark_destroyed"
		high_priority = true		
	-- Enemy lost landmark
	else	
		sfx = "mus_stinger_enemy_landmark_destroyed"
		high_priority = false
		-- This player is killer.
		if player_local.id == landmark.last_attacker then
			title = AGS_FormatText(AGS_CUE_TITLE_LANDMARK_K_ENEMY_SELF_ID, player.playerName) 		
		-- Ally is killer.
		elseif AGS_IsMutualRelation(player_local.id, landmark.last_attacker, R_ALLY) then
			title = AGS_FormatText(AGS_CUE_TITLE_LANDMARK_K_ENEMY_TEAM_ID, player.playerName) 			
		-- Enemy is killer.
		else
			title = AGS_FormatText(AGS_CUE_TITLE_LANDMARK_K_ENEMY_OTHER_ID, player.playerName) 			
		end
	end	
	if title ~= nil then
		-- TODO DELAY IF AND BODY ? BY event_cue_delay == 2.0 see Conquest_CreateEventCue
		if not Core_IsPlayerEliminated(Game_GetLocalPlayer()) then
			AGS_CreateCueComplex(AGS_CUE_LANDMARK_KILLED, high_priority, title, uiColour, sfx)
		end
	end
end

function AGS_Conquest_Notification(player)
	local player_local = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
	-- Play always for now.
	AGS_PlaySFX(player.id)
	-- If local is still in the game show message in right corner.
	if player ~= nil and not player_local.isEliminated then 
		AGS_CreateCue(AGS_CUE_CORE, AGS_FormatText(AGS_CUE_TITLE_CONQUEST_ID, player.playerName))
	end
end