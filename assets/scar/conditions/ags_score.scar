---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Score win condition.
-- All players are eliminated after certain amount of time.
-- Highest score player/team wins. 
---------------------------------------------------------------------------------------------------

AGS_SCORE_MODULE = "AGS_Score"
AGS_SCORE_OBJECTIVE = nil
AGS_SCORE_ACTIVE = true
AGS_SCORE_TIMER = "AGS_ScoreTimer"
AGS_SCORE_VICTORY_TIMER = 60 * 60
AGS_SCORE_CHECK_FREQUENCY = 1.0
AGS_SCORE_COUNTDOWN_NOTIFICATIONS = { }

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_SCORE_MODULE)	

-- Unregister Regicide and prevent it from being initialized.
function AGS_Score_UpdateModuleSettings()
	AGS_Print("AGS_Score_UpdateModuleSettings")
	if not AGS_GLOBAL_SETTINGS.Score then
		Core_UnregisterModule(AGS_SCORE_MODULE)
	end
	AGS_SCORE_VICTORY_TIMER = AGS_GLOBAL_SETTINGS.ScoreSettings.Timer * 60
end

function AGS_Score_OnPlay()
	AGS_Print("AGS_Score_OnPlay")
	AGS_Score_InitializePlacements()
	Rule_AddGlobalEvent(AGS_Score_OnEntityKilled, GE_EntityKilled)
	Rule_AddInterval(AGS_Score_OnTimerTick, AGS_SCORE_CHECK_FREQUENCY)
	AGS_Score_CreateObjective()
	AGS_Score_UpdateObjective()
end

function AGS_Score_OnPlayerDefeated(player, reason)
	AGS_Print("AGS_Score_OnPlayerDefeated")
	if reason == AGS_WR_SCORE then 
		AGS_Notifications_Eliminated(player, AGS_NOTIFICATIONS_SCORE)
		AGS_Conditions_CheckVictory(AGS_SCORE_ACTIVE, AGS_Presentations_Victory, AGS_WR_SCORE,
			AGS_Objectives_PresentWrap(
				AGS_SCORE_OBJECTIVE, 
				OS_Complete, 
				AGS_OBJECTIVES_SCORE.title_victory))
	end	
	AGS_Score_UpdateObjective()
end

function AGS_Score_TreatyStarted()
	AGS_Print("AGS_Score_TreatyStarted")
	AGS_SCORE_ACTIVE = false
end

function AGS_Score_TreatyEnded()
	AGS_Print("AGS_Score_TreatyEnded")
	AGS_SCORE_ACTIVE = true
end

function AGS_Score_OnGameOver()
	AGS_Print("AGS_Score_OnGameOver")
	Rule_RemoveGlobalEvent(AGS_Score_OnEntityKilled)
	Rule_Remove(AGS_Score_OnTimerTick)
	AGS_Score_RemoveObjective()
end

---------------------------------------------------------------------------------------------------
-- Callbacks:
---------------------------------------------------------------------------------------------------

function AGS_Score_OnEntityKilled(context)
	-- TODO
end

function AGS_Score_OnTimerTick()
	-- Check if its over.
	if Timer_Exists(AGS_SCORE_TIMER) and Timer_GetRemaining(AGS_SCORE_TIMER) == 0.0 then	
		Rule_RemoveMe()
		Timer_End(AGS_SCORE_TIMER)
		AGS_Score_EndWar()
	end	
	-- Anyway update objective and countdown notifications.
	AGS_Score_UpdateObjective()
	AGS_Score_UpdatePlacements()
	AGS_Score_Countdown()
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------

function AGS_Score_InitializePlacements()
	-- Prepare notifications and start countdown.
	if not Timer_Exists(AGS_SCORE_TIMER) then	
		AGS_Score_CreateTimerNotifications()
		Timer_Start(AGS_SCORE_TIMER, AGS_TREATY_PEACE_TIME)
	end
end
-- Final evaluation of all placements and deciding winners.
function AGS_Score_EndWar()
	-- TODO
end

function AGS_Score_UpdatePlacements()
	-- TODO
	if AGS_GLOBAL_SETTINGS.ScoreSettings.ShowPlacement then
		
	end
end

function AGS_Score_CreateObjective()
	AGS_SCORE_OBJECTIVE = AGS_Objectives_Create(AGS_OBJECTIVES_SCORE, AGS_GS_LOCAL_PLAYER)
	AGS_Objectives_Set(AGS_SCORE_OBJECTIVE, OS_Incomplete, true, nil, COUNTER_TimerDecreasing)
end

function AGS_Score_UpdateObjective()
	AGS_Objectives_Progress(
		AGS_SCORE_OBJECTIVE, 
		nil,
		nil,
		nil,
		Timer_GetRemaining(AGS_SCORE_TIMER)
	)
end

function AGS_Score_RemoveObjective()
	AGS_Objectives_Set(AGS_SCORE_OBJECTIVE, nil, false)
end

-- Creates list of untriggered notifications.
function AGS_Score_CreateTimerNotifications()
	AGS_SCORE_COUNTDOWN_NOTIFICATIONS = { }
	for i = 1, #AGS_NOTIFICATIONS_COUNTDOWN do
		table.insert(AGS_SCORE_COUNTDOWN_NOTIFICATIONS, { triggered = false, }) 
	end
end
-- Trigger all required notifications before timer runs out.
function AGS_Score_Countdown()	
	for i = 1, #AGS_SCORE_COUNTDOWN_NOTIFICATIONS do
		-- If threshold notification has not been triggered AND timer is in threshold window
		if not AGS_SCORE_COUNTDOWN_NOTIFICATIONS[i].triggered and 
			AGS_NOTIFICATIONS_COUNTDOWN[i].time >= Timer_GetRemaining(AGS_SCORE_TIMER) then 
			-- Mark as triggered.
			AGS_SCORE_COUNTDOWN_NOTIFICATIONS[i].triggered = true			
			AGS_Notification_CountdownNotification(AGS_GS_LOCAL_PLAYER, i, AGS_NOTIFICATIONS_SCORE_COUNTDOWN, true)
		end
	end	
end