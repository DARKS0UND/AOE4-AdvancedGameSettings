---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Team Solidarity subcondition.
-- A player is eliminated when any ally is eliminated. 
-- The last remaining player/team wins. 
---------------------------------------------------------------------------------------------------

AGS_TEAM_SOLIDARITY_MODULE = "AGS_TeamSolidarity"
AGS_TEAM_SOLIDARITY_OBJECTIVE = nil
AGS_TEAM_SOLIDARITY_ACTIVE = true

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_TEAM_SOLIDARITY_MODULE)	

function AGS_TeamSolidarity_UpdateModuleSettings()
	AGS_Print("AGS_TeamSolidarity_UpdateModuleSettings")
	if not AGS_GLOBAL_SETTINGS.TeamSolidarity then
		Core_UnregisterModule(AGS_TEAM_SOLIDARITY_MODULE)
	end
end

function AGS_TeamSolidarity_OnPlay()
	AGS_Print("AGS_TeamSolidarity_OnPlay")
	AGS_TeamSolidarity_CreateObjective()
end

function AGS_TeamSolidarity_TreatyStarted()
	AGS_Print("AGS_TeamSolidarity_TreatyStarted")
	AGS_TEAM_SOLIDARITY_ACTIVE = false
end

function AGS_TeamSolidarity_TreatyEnded()
	AGS_Print("AGS_TeamSolidarity_TreatyEnded")
	AGS_TEAM_SOLIDARITY_ACTIVE = true
end

function AGS_TeamSolidarity_OnPlayerDefeated(player, reason)
	AGS_Print("AGS_TeamSolidarity_OnPlayerDefeated")
	-- Enforces teammates solidarity on other reasons.
	if reason ~= AGS_WR_TEAM_SOLIDARITY then 
		AGS_TeamSolidarity_Enforce(player)
	end
	if reason == AGS_WR_TEAM_SOLIDARITY then
		AGS_Notifications_Eliminated(player, AGS_NOTIFICATIONS_TEAM_SOLIDARITY)
		AGS_Conditions_CheckVictory(AGS_TEAM_SOLIDARITY_ACTIVE, AGS_Presentations_Victory, AGS_WR_TEAM_SOLIDARITY)
	end
end

function AGS_TeamSolidarity_OnGameOver()
	AGS_Print("AGS_TeamSolidarity_OnGameOver")
	AGS_TeamSolidarity_RemoveObjective()
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------

function AGS_TeamSolidarity_CreateObjective()
	local player_id = Game_GetLocalPlayer()
	local player_civ = Player_GetRaceName(player_id)
	AGS_TEAM_SOLIDARITY_OBJECTIVE = AGS_CreateObjective(AGS_OBJECTIVE_TEAMSOLIDARITY, player_id, player_civ)
	AGS_SetObjective(AGS_TEAM_SOLIDARITY_OBJECTIVE, OS_Incomplete, true)
end

function AGS_TeamSolidarity_RemoveObjective()
	AGS_SetObjective(AGS_TEAM_SOLIDARITY_OBJECTIVE, nil, false)
end
-- Enforce Teammates Solidarity.
function AGS_TeamSolidarity_Enforce(defeated_teammate)
	if defeated_teammate ~= nil then
		if not AGS_TEAM_SOLIDARITY_ACTIVE then
			for _, ally_id in pairs(AGS_GetAllAliveTeammates(defeated_teammate.id)) do			
				AGS_SetPlayerDefeated(ally_id, AGS_Presentations_Loss, AGS_WR_TEAM_SOLIDARITY)	
			end
		else			
			-- This is correct way to resolve this for non-treaty situations.
			for _, potential_ally in pairs(PLAYERS) do
				if defeated_teammate ~= potential_ally and not potential_ally.isEliminated then				
					if AGS_IsMutualRelation(defeated_teammate.id, potential_ally.id, R_ALLY) then
						AGS_SetPlayerDefeated(potential_ally.id, AGS_Presentations_Loss, AGS_WR_TEAM_SOLIDARITY)					
					end
				end
			end
		end
	end	
end