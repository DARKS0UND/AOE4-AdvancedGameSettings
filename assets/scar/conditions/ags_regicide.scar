---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Regicide win condition.
-- A player is eliminated when king is defeated.
-- The last remaining player/team wins. 
---------------------------------------------------------------------------------------------------

AGS_REGICIDE_MODULE = "AGS_Regicide"
AGS_REGICIDE_OBJECTIVE = nil
AGS_REGICIDE_ACTIVE_CHECKS = true

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_REGICIDE_MODULE)	

-- If Regicide is enabled in settings, force king option to be true.
function AGS_Regicide_AdjustSettings()
	if AGS_GLOBAL_SETTINGS.Regicide then
		AGS_GLOBAL_SETTINGS.SpawnKing = true
	end
end
-- Unregister Regicide and prevent it from being initialized.
function AGS_Regicide_UpdateModuleSettings()
	if not AGS_GLOBAL_SETTINGS.Regicide then
		Core_UnregisterModule(AGS_REGICIDE_MODULE)
	end
end

function AGS_Regicide_Start()
	AGS_Regicide_StartProgressTracking()
	AGS_Regicide_CreateObjective()
end

function AGS_Regicide_OnPlayerDefeated(player, reason)
	if reason == AGS_WR_REGICIDE then 
		AGS_Regicide_Notification(player)
		AGS_Regicide_CheckVictory()
	end
end

function AGS_Regicide_TreatyStarted()
	AGS_REGICIDE_ACTIVE_CHECKS = false
end

function AGS_Regicide_TreatyEnded()
	AGS_REGICIDE_ACTIVE_CHECKS = true
end

function AGS_Regicide_OnGameOver()
	AGS_Regicide_RemoveObjective()
	AGS_Regicide_StopProgressTracking()
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------

function AGS_Regicide_Notification(player)
	local player_local = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
	-- Play always for now.
	AGS_PlaySFX(player.id)
	-- If local is still in the game show message in right corner.
	if player ~= nil and not player_local.isEliminated then 
		AGS_CreateCue(AGS_CUE_CORE, AGS_CUE_TITLE_REGICIDED_ID, player.playerName)
	end
end

function AGS_Regicide_StartProgressTracking()
	Rule_AddGlobalEvent(AGS_Regicide_OnEntityKilled, GE_EntityKilled)
end

function AGS_Regicide_StopProgressTracking()
	Rule_RemoveGlobalEvent(AGS_Regicide_OnEntityKilled)
end

function AGS_Regicide_CreateObjective()
	local player_id = Game_GetLocalPlayer()
	local player_civ = Player_GetRaceName(player_id)
	AGS_REGICIDE_OBJECTIVE = AGS_CreateObjective(AGS_OBJECTIVE_REGICIDE, player_id, player_civ)
	AGS_SetObjective(AGS_REGICIDE_OBJECTIVE, OS_Incomplete, true)
end

function AGS_Regicide_RemoveObjective()

end

function AGS_Regicide_OnEntityKilled(context)
	if context ~= nil and context.victim ~= nil and Entity_IsOfType(context.victim, AGS_BP_KING) then
		AGS_SetPlayerDefeated(context.victimOwner, AGS_Regicide_LoserPresenation, AGS_WR_REGICIDE)
	end
end
-- Check if there is single remaining allied group.
function AGS_Regicide_CheckVictory()
	if not AGS_REGICIDE_ACTIVE_CHECKS then
		return
	end
	
	local winners = AGS_DoesWinnerGroupExists()
	if winners == nil then
		return
	end
	
	for _, winner_id in pairs(winners) do 
		AGS_SetPlayerVictorious(winner_id, AGS_Regicide_WinnerPresentation, AGS_WR_REGICIDE)
	end
	
	AGS_EndGame()
end

function AGS_Regicide_WinnerPresentation(player_id)
	AGS_Presenation(player_id, AGS_WINNER_VICTORY)
end

function AGS_Regicide_LoserPresenation(player_id)
	AGS_LoserPresenation(player_id, AGS_LOOSER_DEFEAT, AGS_LOOSER_ELIMINATED)
end