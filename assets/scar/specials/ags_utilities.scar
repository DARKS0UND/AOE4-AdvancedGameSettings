---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Contains additional match support created by relic that is currently not expected to be rewritten.
---------------------------------------------------------------------------------------------------

-- Replay System.
import("replay/replaystatviewer.scar")
-- Notification system.
import("gameplay/event_cues.scar")
-- Age UI.
import("gameplay/currentageui.scar")
-- Chinese Dynasty UI.
import("gameplay/chi/current_dynasty_ui.scar")
-- Score UI.
import("gameplay/score.scar")
-- Cheat support for dev mode.
import("gameplay/cheat.scar") 
-- Tutorial goals available to new players.
import("training/coretraininggoals.scar")
import("training/frenchtraininggoals.scar")
import("training/englishtraininggoals.scar")
import("training/sultanatetraininggoals.scar")
import("training/rustraininggoals.scar")
import("training/mongoltraininggoals.scar")
import("training/chinesetraininggoals.scar")
import("training/abbasidtraininggoals.scar")

---------------------------------------------------------------------------------------------------
-- Options:
-- Relic uses in code behind certain options, that can be set and will then apply their effect.
-- This is list of all options that we were able to reverse engineer.
---------------------------------------------------------------------------------------------------
-- section_inner_win_conditions
--	 	option_win_condition_conquest
--	 	option_win_condition_religious
--	 	option_win_condition_wonder
-- section_diplomacy
--	 	option_diplomacy_teams (Refers to option called Locked Teams)
--	 	option_diplomacy_tribute
-- section_endgame (Never implemented option to allow / disallow spectating after elimination.)
--		option_allow_spectators
-- section_starting_conditions
-- 		reveal_fow_on_elimination (Exact path is used for Core_RevealFOWOnEliminationEnabled)
--		option_fow[option_fow_concealed, option_fow_explore, option_fow_reveal]
--		option_score
-- 		option_start_age[option_start_nomad, option_start_age_1, option_start_age_2, option_start_age_3, option_start_age_4]
--		option_vision[option_vision_default]
--		option_speed[option_speed_2x, option_speed_3x, option_speed_20x, option_speed_50x, option_speed_100x]
--		option_initial_units[initial_units_none, initial_units_standard]
--		option_starting_resources[resources_standard, resources_high, resources_very_high, resources_max] (Automatically binded)
--		option_timer[option_timer_reset]
---------------------------------------------------------------------------------------------------

AGS_UTILITIES_MODULE = "AGS_Utilities"
AGS_UTILITIES_LOCAL_PLAYER = nil

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_UTILITIES_MODULE)	

function AGS_Utilities_SetupSettings(options)
	-- Set player behaviour when eliminated.
	if options.section_endgame then 
		allow_spectators = options.section_endgame.option_allow_spectators
	end
end

function AGS_Utilities_Start()
end
function AGS_Utilities_OnInit()
	UI_AllTerritoryHide()
	
	AGS_Utilities_OnLocalPlayerChanged(Game_GetLocalPlayer())
	Rule_AddGlobalEvent(AGS_Utilities_OnLocalPlayerChanged, GE_LocalPlayerChanged)
	
	AGS_Utilities_StandardReplay()	
end

function AGS_Utilities_OnPlayerDefeated(player, reason)
	-- Reveal all on local player defeated.
	local localPlayer = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
	if player == localPlayer and Core_RevealFOWOnEliminationEnabled() then
		FOW_UIRevealAll()
	end
end

function AGS_Utilities_OnGameOver()
	Rule_AddGlobalEvent(AGS_Utilities_OnLocalPlayerChanged)
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------
-- Called when local player is changed.
function AGS_Utilities_OnLocalPlayerChanged(context)
	if context ~= nil and context.player ~= nil then
		AGS_UTILITIES_LOCAL_PLAYER = Core_GetPlayersTableEntry(context.player)
	end
end

-- used in conquest and surrender winconditions
--? @shortdesc Returns the value of the "Reveal FOW on Elimination" match option
--function Core_RevealFOWOnEliminationEnabled()
--	local reveal_fow_on_elimination = false
--	
--	local matchOptions = {}
--	Setup_GetWinConditionOptions(matchOptions)
--	
--	if matchOptions.section_starting_conditions then
--		return matchOptions.section_starting_conditions.reveal_fow_on_elimination
--	end
--		
--	return false
--end

-- Initialize replay stats
function AGS_Utilities_StandardReplay()
	if AGS_GLOBAL_SETTINGS.Religious then
		ReplayStatViewer_PopulateReplayStatTabs({"ReligiousTrackerTemplate"})
		ReplayStatViewer_RegisterPlayerDataContextUpdater(Religious_UpdatePlayerStats)
	end
	if AGS_GLOBAL_SETTINGS.Conquest then
		ReplayStatViewer_PopulateReplayStatTabs({"ConquestTrackerTemplate"})
		ReplayStatViewer_RegisterPlayerDataContextUpdater(Conquest_UpdatePlayerStats)
	end
	if AGS_GLOBAL_SETTINGS.Wonder then
		ReplayStatViewer_PopulateReplayStatTabs({"WonderTrackerTemplate"})
		ReplayStatViewer_RegisterPlayerDataContextUpdater(Wonder_UpdatePlayerStats)
	end
	ReplayStatViewer_PopulateReplayStatTabs({"CurrentResourcesTemplate", "IncomeTemplate", "MilitaryTemplate"})	
end

-- Callback invoked by UpdatePlayerDataContexts() in replaystatviewer.scar to fetch player progress
function Religious_UpdatePlayerStats(player, scarModel)	
	scarModel.Relics_Target = #_religious.sites
	scarModel.Relics_Current = Religious_SitesOwnedByPlayer(player)
end

-- Callback invoked by UpdatePlayerDataContexts() in replaystatviewer.scar to fetch player progress
function Conquest_UpdatePlayerStats(player, scarModel)
	local landmarks_built = 0
	local landmarks_remaining = 0
	
	for id, landmark in pairs(player.landmarks) do
		landmarks_built = landmarks_built + 1
		if Entity_IsValid(id) and Entity_GetStateModelBool(Entity_FromID(id), "landmark_active") then 
			landmarks_remaining = landmarks_remaining + 1
		end
	end
		
	scarModel.Conquest_Target = landmarks_built
	scarModel.Conquest_Current = landmarks_remaining
end

-- Callback invoked by UpdatePlayerDataContexts() in replaystatviewer.scar to fetch player progress
function Wonder_UpdatePlayerStats(player, scarModel)	
	if not player.isEliminated and player._wonder.entity_id ~= nil and Entity_IsValid(player._wonder.entity_id) then 
		if Timer_Exists(player._wonder.timer_victory_deterministic) then 
			scarModel.Wonder_Target = _wonder.time_victory 								-- in sec
			scarModel.Wonder_Current = Timer_GetRemaining(player._wonder.timer_victory_deterministic) -- in sec	
			return
		elseif Entity_GetBuildingProgress(Entity_FromID(player._wonder.entity_id)) < 1.0 then
			scarModel.Wonder_Target = _wonder.time_victory 	-- in sec
			scarModel.Wonder_Current = 0 					-- in sec	0 : under construction
			return
		end
	end
	scarModel.Wonder_Target = 0 	-- in sec
	scarModel.Wonder_Current = -1 	-- in sec	-1 : not constructed
end