-- Authors:
-- Relic
-- Woprock
-- jackelpobelope (InternalCustomStartConditions_ScatteredVillagersStart)
--
-- Contains function that initialize player starting position.
-- Main mode must call CustomStartConditions_HandleStartPosition during PostInit and CustomStartConditions_OnStartContinuation during Start, might be registred as module later.
-- Requires custom_helpers.scar
--
--

-- PostInit() fake handler for now
function CustomStartConditions_HandleStartPosition(_match)
	--Starting type
	if _match.options.section_custom_conditions and 
	   _match.options.section_custom_conditions.option_start_type then 
		-- standard
		if _match.options.section_custom_conditions.option_start_type.enum_value == _match.options.section_custom_conditions.option_start_type.enum_items.standard then
			InternalCustomStartConditions_StandardStart(_match)
			InternalCustomStartConditions_RevealInitialMapArea(_match)
			-- Spawn each civilization squad
			InternalCustomStartConditions_SpawnInitialSquads()
		-- slow nomad
		elseif _match.options.section_custom_conditions.option_start_type.enum_value == _match.options.section_custom_conditions.option_start_type.enum_items.slow_nomad then
			InternalCustomStartConditions_SetupNomadStart(_match)
			-- Spawn each civilization squad
			InternalCustomStartConditions_SpawnInitialSquads()
		-- scattered villagers
		elseif _match.options.section_custom_conditions.option_start_type.enum_value == _match.options.section_custom_conditions.option_start_type.enum_items.scattered_villagers then
			InternalCustomStartConditions_SetupNomadStart(_match)
			InternalCustomStartConditions_ScatteredVillagersStart()	
		end		
	end
end

-- Start() fake handler for now
function CustomStartConditions_OnStartContinuation(_match)
	--Starting type
	if _match.options.section_custom_conditions and 
		_match.options.section_custom_conditions.option_start_type and 
		_match.options.section_custom_conditions.option_start_type.enum_value == _match.options.section_custom_conditions.option_start_type.enum_items.slow_nomad then
		InternalCustomStartConditions_SlowNomadOnStart(_match)
	end	
end

-- Setup initial TC or mongol moving TC
function InternalCustomStartConditions_StandardStart(_match)
	for i, player in pairs(PLAYERS) do			
		-- chinese dont work with this, most likely due to missing value in table for their capital TC
		--local townCenterEBP = Cardinal_ConvertTypeToEntityBlueprint({_match.types.townCenter, _match.types.landmark}, player.id)				
		
		local player_civ = Player_GetRaceName(player.id)
		
		
		-- this can be naive ??? for now we will pretend to be serious
		if player_civ == "mongol" then
			local sqTownCenter = Player_GetSquadsFromType(player.id, _custom.townCenter)
			if SGroup_Count(sqTownCenter) == 0 then	
				local sbp_tc = BP_GetSquadBlueprint("building_town_center_capital_moving_mon")
				local snameTC = InternalCustomOptions_SquadGroupName(player.id, _custom.town_center)
				local sg_tc = InternalCustomOptions_SpawnSquadsAtSpawnOffset(player.id, snameTC, sbp_tc, 0, 0, 0, 1)
			end
		-- Create the initial (capital) town center, if necessary	
		else	
			local egTownCenter = Player_GetEntitiesFromType(player.id, _match.types.townCenter) 
			if EGroup_Count(egTownCenter) == 0 then	
				local ebp_tc = InternalCustomOptions_GetTownCenterCapital(player_civ)		
				local enameTC = InternalCustomOptions_EntityGroupName(player.id, _custom.town_center)
				local eg_tc = InternalCustomOptions_SpawnEntityAtSpawnOffset(player.id, enameTC, ebp_tc, 0, 0, 0)
				-- Send event (conquest win condition relies on this)
				Core_CallDelegateFunctions("OnConstructionComplete", {pbg = ebp_tc, player = player.id, entity = eg_tc})	
			end			
		end		
	end
end
-- Setup initial reveal for standard, other condition would be too easy with it.
function InternalCustomStartConditions_RevealInitialMapArea(_match)		
	-- Reveal fog of war
	for i, player in pairs(PLAYERS) do	
		if _match.FOWRevealRadius ~= nil then
			FOW_PlayerRevealArea(player.id, player.startingPos, _match.FOWRevealRadius, 0.25)		
		end
	end
end
-- Setup for some edge cases, this might be actually obsolate and could go.
function InternalCustomStartConditions_SetupNomadStart(_match)
	for i, player in pairs(PLAYERS) do		
		local player_civ = Player_GetRaceName(player.id)
		-- There will be no initial buildings for player ?
		Player_SetStateModelFloat(player.id, "has_capital", 0)
		-- Player should not build structures
		if not AI_IsAIPlayer(player.id) then
			Player_SetStateModelBool(player.id, "player_can_construct_structures", true)
		end
	end
end

-- Setup timers.
function InternalCustomStartConditions_SlowNomadOnStart(_match)
	-- time tracking data
	_custom.nomad.timeStarted = World_GetGameTime()
	_custom.nomad.timeThreshold = 0
	_custom.nomad.timeInterval = _custom.nomad.duration / _match.nomad.wood	
	
	InternalCustomStartConditions_ResetResources(_match)
end

-- Clear resources and continue with slow trickle.
function InternalCustomStartConditions_ResetResources(_match)
	
	for i, player in pairs(PLAYERS) do	
		
		-- Track resources remaining to provide
		player._nomadStart = { resources = {} }
		player._nomadStart.resources["Food"] = Player_GetResource(player.id, RT_Food)
		player._nomadStart.resources["Wood"] = Player_GetResource(player.id, RT_Wood)
		player._nomadStart.resources["Stone"] = Player_GetResource(player.id, RT_Stone)
		player._nomadStart.resources["Gold"] = Player_GetResource(player.id, RT_Gold)
		
		-- Adjust the difference needed for TC
		local player_civ = Player_GetRaceName(player.id)
		if player_civ == "mongol" then
			player._nomadStart.resources["Wood"] = player._nomadStart.resources["Wood"] + _match.nomad.wood
		elseif player_civ == "chinese" and AI_IsAIPlayer(player.id) then
			player._nomadStart.resources["Wood"] = player._nomadStart.resources["Wood"] + _match.nomad.wood + 375
			player._nomadStart.resources["Stone"] = player._nomadStart.resources["Stone"] + _match.nomad.stone
		else
			player._nomadStart.resources["Wood"] = player._nomadStart.resources["Wood"] + _match.nomad.wood
			player._nomadStart.resources["Stone"] = player._nomadStart.resources["Stone"] + _match.nomad.stone
		end
		
		-- Reset resources
		Player_ResetResource(player.id, RT_Food)
		Player_ResetResource(player.id, RT_Wood)
		Player_ResetResource(player.id, RT_Stone)
		Player_ResetResource(player.id, RT_Gold)									
	end
	
	Rule_Add(InternalCustomStartConditions_IncrementResources)
end

-- Rule that incrementally returns initial resources to players over time.
function InternalCustomStartConditions_IncrementResources()	
	
	if World_GetGameTime() - _custom.nomad.timeStarted >= _custom.nomad.timeThreshold then
		local allResourcesReceived = true
		
		for i, player in pairs(PLAYERS) do
		
			local _IncrementResource = function(resIndex, resType) 				
				if player._nomadStart.resources[resIndex] > 0 then
					if player._nomadStart.resources[resIndex] == 1 then
						Player_AddResource(player.id, resType, 1)
						player._nomadStart.resources[resIndex] = 0
					else
						Player_AddResource(player.id, resType, 1)
						player._nomadStart.resources[resIndex] = player._nomadStart.resources[resIndex] - 1						
					end
				end
			end
			
			_IncrementResource("Food", RT_Food)
			_IncrementResource("Wood", RT_Wood)
			_IncrementResource("Stone", RT_Stone)
			_IncrementResource("Gold", RT_Gold)	
			
			-- Stop when player has received all resources
			for k,v in pairs(player._nomadStart.resources) do
				if player._nomadStart.resources[k] > 0 then
					allResourcesReceived = false
				end
			end
		end		
		
		if allResourcesReceived then		
			InternalCustomStartConditions_ResourcesFinished()
		else
			_custom.nomad.timeThreshold = _custom.nomad.timeThreshold + _custom.nomad.timeInterval
		end		
	end	
end

-- Ends nomad start's incremental resource accumulation. Gives players remaining resources, if any.
function InternalCustomStartConditions_ResourcesFinished()

	if Rule_Exists(InternalCustomStartConditions_IncrementResources) then	
	
		Rule_Remove(InternalCustomStartConditions_IncrementResources)								
		
		for i, player in pairs(PLAYERS) do		
			Player_AddResource(player.id, RT_Food, player._nomadStart.resources["Food"])
			Player_AddResource(player.id, RT_Wood, player._nomadStart.resources["Wood"])
			Player_AddResource(player.id, RT_Stone, player._nomadStart.resources["Stone"])
			Player_AddResource(player.id, RT_Gold, player._nomadStart.resources["Gold"])
			player._nomadStart = nil	
		end					
	end
end


function InternalCustomStartConditions_SpawnInitialSquads()
	for i, player in pairs(PLAYERS) do
		local player_civ = Player_GetRaceName(player.id)
		
		local sbp_vil = InternalCustomOptions_GetVillager(player_civ)
		local snameVIL = InternalCustomOptions_SquadGroupName(player.id, _custom.villager)
		local sg_vil = InternalCustomOptions_SpawnSquadsAtSpawnOffset(player.id, snameVIL, sbp_vil, -10, 0, -10, _custom.starting_villagers)
		CustomOptions_AssignAIToPosition(player.id, nil, sg_vil)
		
		local sbp_sco = InternalCustomOptions_GetScout(player_civ)
		local snameSCO = InternalCustomOptions_SquadGroupName(player.id, _custom.scout)
		local sg_sco = InternalCustomOptions_SpawnSquadsAtSpawnOffset(player.id, snameSCO, sbp_sco, -12, 0, -12, 1)
		--CustomOptions_AssignAIToPosition(player.id, nil, sg_sco)
		
		local sbp_shp = InternalCustomOptions_GetSheep(player_civ)
		local snameSHP = InternalCustomOptions_SquadGroupName(player.id, _custom.sheep)
		local sg_shp = InternalCustomOptions_SpawnSquadsAtSpawnOffset(player.id, snameSHP, sbp_shp, -9, 0, -9, 1)
		--CustomOptions_AssignAIToPosition(player.id, nil, sg_shp)
	end
end


-- Called on match initialization before handing control to the player
function InternalCustomStartConditions_ScatteredVillagersStart()	
	_custom.radius = math.max(World_GetWidth(), World_GetLength())/1.8 -- 1.8 to try and tune villager spawn out from the middle of the map	
	
	for i, player in pairs(PLAYERS) do		
		player_civ = Player_GetRaceName(player.id)		
		-- Increase starting resources to cover building a TC
		if player_civ == "mongol" then
			Player_GiftResource(player.id, RT_Wood, 400)
		elseif player_civ == "chinese" and AI_IsAIPlayer(player.id) then
			Player_GiftResource(player.id, RT_Wood, 775)
			Player_GiftResource(player.id, RT_Stone, 300)
		else
			Player_GiftResource(player.id, RT_Wood, 400)
			Player_GiftResource(player.id, RT_Stone, 300)
		end
		
		-- Get Villager BP and spawn them at single location, before spreading them out to create artificial home for AI.
		local sbp_vil = InternalCustomOptions_GetVillager(player_civ)		
		local snameVIL = InternalCustomOptions_SquadGroupName(player.id, _custom.villager)
		
		-- Get spawn dimensions and initial squad location
		local map_center = World_Pos(0, 0, 0)	
		
		local _f_random_position = function()
			local x = World_GetRand(0 - _custom.radius, _custom.radius)
			local z = World_GetRand(0 - _custom.radius, _custom.radius)
			local y = World_GetHeightAt(x, z)
			return World_Pos(x, y, z)
		end
		
		local spawn_pos = _f_random_position()
		-- Finish squad spawn and assign it to AI if required.
		local sg_vil = InternalCustomOptions_SpawnSquadsAtPosition(player.id, snameVIL, sbp_vil, spawn_pos, _custom.scattered_villagers)	
		LocalCommand_Squad(player.id, sg_vil, SCMD_Stop, false)	
		CustomOptions_AssignAIToPosition(player.id, spawn_pos, sg_vil)	
		
		
		local _f_randomize_unit = function(gid, idx, sid)
			Squad_WarpToPos(sid, _f_random_position())
		end
		
		--Randomize all members location. 
		SGroup_ForEach(sg_vil, _f_randomize_unit)
	end
end	