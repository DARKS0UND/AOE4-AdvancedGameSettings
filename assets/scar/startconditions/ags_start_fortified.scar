---------------------------------------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- Wrapper around settled style, that creates walls.
---------------------------------------------------------------------------------------------------

AGS_FORTIFIED_MODULE = "AGS_Fortified"

---------------------------------------------------------------------------------------------------
-- Delegates:
---------------------------------------------------------------------------------------------------

Core_RegisterModule(AGS_FORTIFIED_MODULE)	

function AGS_Fortified_UpdateModuleSettings()
	AGS_Print("AGS_Fortified_UpdateModuleSettings")
	if AGS_GLOBAL_SETTINGS.Settlement ~= AGS_GS_SETTLEMENT_FORTIFIED then
		Core_UnregisterModule(AGS_FORTIFIED_MODULE)
	end
end

function AGS_Fortified_PresetExecute()
	AGS_Print("AGS_Fortified_PresetExecute")
	-- Callback to parent.
	AGS_Settled_PresetExecute()
end

function AGS_Fortified_OnStarting()
	AGS_Print("AGS_Fortified_OnStarting")
	-- Attempt to do a wall cheese.
	AGS_Fortified_OnWall()
end

---------------------------------------------------------------------------------------------------
-- Functions:
---------------------------------------------------------------------------------------------------
AGS_FORTIFIED_CORNERS = {
	LeftTop = { x = 75, z = 75 },
	RightTop = { x = 75, z = -75 },
	RightBot = { x = -75, z = -75 },
	LeftBot = { x = -75, z = 75 },
	LeftTopStep = { x = 0, z = -1 },
	RightTopStep = { x = -1, z = 0 },
	RightBotStep = { x = 0, z = 1 },
	LeftBotStep = { x = 1, z = 0 },
}
AGS_FORTIFIED_NEUTRALS = {
	
	
}

function AGS_Fortified_OnWall()
	-- Help functions
	local AGS_Fortified_DespawnTemp = function(gid, idx, eid)
		AGS_FORTIFIED_NEUTRALS[idx] = Entity_GetPosition(eid)
		Entity_WarpToPos(eid, World_Pos(0,0,0))
	end
	local AGS_Fortified_SpawnTemp = function(gid, idx, eid)
		Entity_WarpToPos(eid, AGS_FORTIFIED_NEUTRALS[idx])
	end
	local neutral_egroup = EGroup_CreateUnique("ags")
	World_GetAllNeutralEntities(neutral_egroup)
	EGroup_ForEach(neutral_egroup, AGS_Fortified_DespawnTemp)
	-- Prefetch
	local player = AGS_GS_LOCAL_PLAYER
	local bp = BP_GetEntityBlueprint("building_defense_wall_fre")
	local spawn_position = AGS_GlobalSettings_GetStartPosition(player.id)
	-- New vars
	local step_size = 10
	local step_count = 150/10
	-- Plant func
	local AGS_Fortified_Plant = function(idx_st, idx_end, corner, step)
		local start_at = World_Pos(0, 0, 0)
		local close_at = World_Pos(0, 0, 0)
		start_at = AGS_Fortified_StartCoordinates(spawn_position, corner)
		AGS_Print("started", start_at)
		for i=idx_st, idx_end do 
			close_at = AGS_Fortified_AdjustCoordinates(start_at, step, step_size)
			LocalCommand_PlayerPlaceAndConstructSlottedSplinePlanned(player.id, bp, start_at, close_at, false, false)
			start_at = close_at
		end
		AGS_Print("finished", start_at)
	end
	-- left top corner
	AGS_Fortified_Plant(1, step_count, AGS_FORTIFIED_CORNERS.LeftTop, AGS_FORTIFIED_CORNERS.LeftTopStep)
	-- right top corner
	AGS_Fortified_Plant(1, step_count, AGS_FORTIFIED_CORNERS.RightTop, AGS_FORTIFIED_CORNERS.RightTopStep)
	-- right bot corner
	AGS_Fortified_Plant(1, step_count, AGS_FORTIFIED_CORNERS.RightBot, AGS_FORTIFIED_CORNERS.RightBotStep)
	-- left bot corner
	AGS_Fortified_Plant(1, step_count, AGS_FORTIFIED_CORNERS.LeftBot, AGS_FORTIFIED_CORNERS.LeftBotStep)
	-- construct 
	local walls = Player_GetEntitiesFromType(player.id, "wall")
	local AGS_Fortified_Construct = function(gid, idx, eid)
		--Entity_Spawn(eid)
		Entity_ForceSelfConstruct(eid)
		--Entity_SnapToGridAndGround(eid, false)
	end
	EGroup_ForEach(walls, AGS_Fortified_Construct)
	
	EGroup_ForEach(neutral_egroup, AGS_Fortified_SpawnTemp)
end


function AGS_Fortified_StartCoordinates(spawn, corner)
	-- start corner coordinates
	local x_str = spawn.x + corner.x
	local z_str = spawn.z + corner.z
	return World_Pos(x_str, World_GetHeightAt(x_str, z_str), z_str)
end

function AGS_Fortified_AdjustCoordinates(start, step, step_size)
	local x_end = start.x + step.x * step_size
	local z_end = start.z + step.z * step_size	
	return World_Pos(x_end, World_GetHeightAt(x_end, z_end), z_end)
end