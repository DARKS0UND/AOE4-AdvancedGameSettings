-----------------------------------------------------------------------
--
-- Elimination win condition 
--
-- A player is eliminated when they quit (through the button in the Pause menu) or otherwise drop/disconnect. 
-- The last remaining player/team wins. 
--
-- (c) Relic Entertainment 2019
--
-----------------------------------------------------------------------

-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

_elimination = {
	lastManStanding = false,
	cue = {						-- event cue shown when player is eliminated 
		lifetime = 10.0,		-- should match the defaults set in AE under tuning.ui.event_cues
		repeatTime = 30.0,		-- should match the defaults set in AE under tuning.ui.event_cues
		title = Loc_Empty(),
		desc = Loc_Empty(),
		sfx = "sfx_ui_event_queue_high_priority_play",
		icon = "icons\\event_queue_high_priority_large",
		color = {r = 255, g = 255, b = 255, a = 255},
		template = "high_priority", 
		style = ECV_Queue | ECV_Title,
	},
}

-----------------------------------------------------------------------
-- Scripting framework
-----------------------------------------------------------------------

Core_RegisterModule("Elimination")


-----------------------------------------------------------------------
-- Callbacks
-----------------------------------------------------------------------

-- Callback invoked when Diplomacy is enabled (indicates whether win condition should be based on player instead of team).
function Elimination_DiplomacyEnabled(isEnabled)
	_elimination.lastManStanding = isEnabled
end


-- Callback invoked by OnPlayerAITakeover() in core.scar
-- Overrides default behaviour of DefaultOnPlayerAITakeover() to keep game going regardless of number of humans.
function Elimination_OnPlayerAITakeover(context)

	OnPlayerAITakeover_Hold()	
	
	local player = Core_GetPlayersTableEntry(context.player)
	if player.isHuman and not player.isEliminated then 
		
		print(string.format("Elimination_OnPlayerAITakeover() - %s replaced by AI", player.playerName.LocString))		
		
		-- Show event queue notification
		local player_local = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
		if not player_local.isEliminated then 
			local cue = _elimination.cue			
			local title = Loc_FormatText(11165820, player.playerName) -- "%1PLAYER_NAME% eliminated"			
			UI_CreateEventCueClickable(-1, cue.lifetime, 0, cue.repeatTime, title, cue.desc, cue.template, cue.icon, cue.sfx, cue.color.r, cue.color.g, cue.color.b, cue.color.a, cue.style, nothing)	
		end
		
		-- Human players here quit the game and are eliminated
		-- AI players here were hosted on the now disconnected human players computer, and need to move to another
		-- client. This was done in C++ land (in GameWorld::SetGameOver and GameWorld::StationTakeOverAi) so don't
		-- eliminate them here.
		Core_SetPlayerDefeated(player.id, Elimination_LoserPresentation, WR_ELIMINATION)
	end
end


-- Callback invoked by Core_SetPlayerDefeated() when a player is eliminated.
function Elimination_OnPlayerDefeated(player, reason)
	if reason == WR_ELIMINATION then
		
		-- Needed to prevent AI Takeover
		-- Kill player
		World_KillPlayer(player.id, KPR_Lost)
		
		-- Check if any player victorious
		Elimination_CheckVictory()
	end
end



-----------------------------------------------------------------------
-- Private/Internal functions
-----------------------------------------------------------------------

function Elimination_CheckVictory()
	if _elimination.lastManStanding then 
		local living_count = 0
		local total_count = 0
		for i, player in pairs(PLAYERS) do
			total_count = total_count + 1
			if Player_IsAlive(player.id) then 
				living_count = living_count + 1
			end
		end
		if living_count ~= total_count and living_count == 1 then
			for i, player in pairs(PLAYERS) do
				if Player_IsAlive(player.id) then 
					Core_SetPlayerVictorious(player.id, Elimination_WinnerPresentation, WR_ELIMINATION)	
				end
			end		
			Core_OnGameOver()		
		end
		
		return
	end
	
	
	
	-- Track one of the surviving players
	local winning_player = nil
	
	-- For all players
	for i, player in pairs(PLAYERS) do
		
		-- If player is not eliminated
		if not Core_IsPlayerEliminated(player.id) then 
			
			-- Get remaining enemies of player
			local enemies_remaining = Elimination_GetActiveEnemyCount(player)
			
			-- If no enemies remain
			if enemies_remaining == 0 then
				-- Track player
				winning_player = player
				break
			end
		end
	end
	
	if winning_player ~= nil then
		
		-- For every player
		for i, player in pairs(PLAYERS) do
			
			-- If player is winning player's ally
			if Player_ObserveRelationship(player.id, winning_player.id) == R_ALLY then
				Core_SetPlayerVictorious(player.id, Elimination_WinnerPresentation, WR_ELIMINATION)	
			end
		end
	end
end

-- Returns number of enemies remaining for a given player
function Elimination_GetActiveEnemyCount(player)
	
	-- Track enemies remaining
	local enemies_remaining = {}
	
	-- For every other player
	for i, player_other in pairs(PLAYERS) do
		
		-- If other player is not the given player, is an enemy, and is not eliminated
		if player ~= player_other and not Core_IsPlayerEliminated(player_other.id) and Player_ObserveRelationship(player.id, player_other.id) == R_ENEMY then 
			
			-- Add enemy player to table
			table.insert(enemies_remaining, player_other)
		end
	end
	
	-- Return number of enemies remaining
	return #enemies_remaining
end

-- Winner presentation
function Elimination_WinnerPresentation(playerID)
	if playerID == Game_GetLocalPlayer() then		
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, { 
			_playerID = playerID, 
			_icon = nil,											-- Unused 
			_endType = Loc_GetString(11161277), 					-- "VICTORY"  
			_message = Loc_Empty(),									-- Unused 
			_sound = "ConquestVictoryEvent", 
			_videoURI = "stinger_victory" 
		})
	end
end


-- Loser presentation
function Elimination_LoserPresentation(playerID)
	if playerID == Game_GetLocalPlayer() then

		local title = Loc_GetString(11165094)			-- "DEFEAT"
		local video = "stinger_defeat"
		
		-- Use 'eliminated' instead of 'defeat' if at least one ally remaining
		if not _annihilation.is_diplomacy_enabled then
			local player_local = Core_GetPlayersTableEntry(playerID)
			for _, player in pairs(PLAYERS) do 
				if not player.isLocal and not player.isEliminated and Player_ObserveRelationship(player_local.id, player.id) == R_ALLY then
					title = Loc_GetString(11165821)		-- "ELIMINATED"
					video = "stinger_eliminated"
					break
				end
			end
		end
		
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, {
			_playerID = playerID, 
			_icon = nil,											-- Unused 
			_endType = title, 
			_message = Loc_Empty(),									-- Unused
			_sound = "ConquestDefeatEvent", 
			_videoURI = video
		})
	end
end