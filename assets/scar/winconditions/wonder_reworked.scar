-----------------------------------------------------------------------
-- Authors:
-- Relic
-- Woprock
--
-- Description:
-- The classic 'wonder' win condition in which the player wins by building a wonder
-- and defending it for 10 minutes. 
-----------------------------------------------------------------------

-- Provide data to replay system through this script
import("replay/replaystatviewer.scar")

-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

_wonder = {
	solo_victory = false,		-- only builder wins if true
	time_victory = 15 * 60,		-- Countdown time to victory after wonder is constructed (in seconds)	
	countdown_notifications = {	-- Points during countdown at which to display loss warning.   
		{ time = 3 * 60 },		-- Arrange in decreasing order since music intensity increases when the last one triggers
		{ time = 2 * 60 },
		{ time = 1 * 60 },
	},
	icons = {
		objective = "icons\\races\\common\\victory_conditions\\victory_condition_wonder",
		destroy = "icons/objectives/objectives_warning_small",
	},	
	types = {		
		age4 = "wonder_imperial_age",
	},
	FOWRadius = 12.0,
	event_cue_delay = 2.0,
	sfx = {
		construction_start_player_team = "mus_stinger_wonder_win_build_start_ally",
		construction_start_enemy_team = "mus_stinger_wonder_win_build_start_enemy",
		sfx_victory_timer_first = "sfx_ui_victory_countdown_update_first",
		sfx_victory_timer_second = "sfx_ui_victory_countdown_update_second",
		sfx_victory_timer_final = "sfx_ui_victory_countdown_update_final",
		countdown_start_player = "mus_stinger_wonder_win_countdown_player",
		countdown_start_ally = "mus_stinger_wonder_win_countdown_ally",
		countdown_start_enemy = "mus_stinger_wonder_win_countdown_enemy",
		damaged_player_team = "mus_stinger_wonder_building_damaged",
		destroyed_player = "mus_stinger_wonder_win_interrupted_player",
		destroyed_ally = "mus_stinger_wonder_win_interrupted_ally",
		destroyed_enemy = "mus_stinger_wonder_win_interrupted_enemy",
		sfx_victory_timer_mix_event = "mus_shared_victory_countdown_mix_event",
		sfx_victory_timer_mix_reset_event = "mus_shared_victory_countdown_mix_event_reset",
	},
	interval_damage = 30.0,		-- minimum time since wonder was last damaged to trigger 'Wonder under attack' notification 
	cue = {						-- event cue shown when wonder construction started/completed  
		title = Loc_Empty(),
		desc = Loc_Empty(),
		sfx = "",
		icon = "",
		template = "high_priority",
		style = ECV_Queue | ECV_Title,
	},
	cueDamaged = {				-- event cue shown when wonder is damaged
		title = Loc_Empty(),
		desc = Loc_Empty(),
		sfx = "mus_stinger_wonder_building_damaged",
		icon = "icons\\event_queue_high_priority_large",
		template = "high_priority",
		style = ECV_Queue | ECV_Title,
	},
	cueDestroyed = {			-- event cue shown when wonder is destroyed 
		title = Loc_Empty(),
		desc = Loc_Empty(),
		sfx = "mus_stinger_wonder_build_destroy_player_neg",
		icon = "icons\\event_queue_high_priority_large",
		template = "high_priority", 
		style = ECV_Queue | ECV_Title,
	},
	cueCountdown = {			-- event cue shown at countdown intervals 
		title = Loc_Empty(),
		desc = Loc_Empty(),
		sfx = "sfx_ui_victory_countdown_update_first",
		icon = "icons\\event_queue_high_priority_large",
		template = "high_priority", 
		style = ECV_Queue | ECV_Title,
	},	
}

-----------------------------------------------------------------------
-- Scripting framework 
-----------------------------------------------------------------------

Core_RegisterModule("Wonder")

-----------------------------------------------------------------------
-- Callbacks
-----------------------------------------------------------------------

function Wonder_UpdateConditions(_match)
	local new_timer_in_minutes = -1
	if _match.options.section_outer_win_conditions and 
		_match.options.section_outer_win_conditions.option_wonder_timer then
		if
			_match.options.section_outer_win_conditions.option_wonder_timer.enum_value == _match.options.section_outer_win_conditions.option_wonder_timer.enum_items.wonder_instant then
			new_timer_in_minutes = 0
		elseif
			_match.options.section_outer_win_conditions.option_wonder_timer.enum_value == _match.options.section_outer_win_conditions.option_wonder_timer.enum_items.wonder_5 then
			new_timer_in_minutes = 5
		elseif
			_match.options.section_outer_win_conditions.option_wonder_timer.enum_value == _match.options.section_outer_win_conditions.option_wonder_timer.enum_items.wonder_10 then
			new_timer_in_minutes = 10
		elseif
			_match.options.section_outer_win_conditions.option_wonder_timer.enum_value == _match.options.section_outer_win_conditions.option_wonder_timer.enum_items.wonder_15 then
			new_timer_in_minutes = 15
		elseif
			_match.options.section_outer_win_conditions.option_wonder_timer.enum_value == _match.options.section_outer_win_conditions.option_wonder_timer.enum_items.wonder_20 then
			new_timer_in_minutes = 20
		elseif
			_match.options.section_outer_win_conditions.option_wonder_timer.enum_value == _match.options.section_outer_win_conditions.option_wonder_timer.enum_items.wonder_25 then
			new_timer_in_minutes = 25
		elseif
			_match.options.section_outer_win_conditions.option_wonder_timer.enum_value == _match.options.section_outer_win_conditions.option_wonder_timer.enum_items.wonder_30 then
			new_timer_in_minutes = 30
		end
	end

	if new_timer_in_minutes >= 0 then
		_wonder.time_victory = new_timer_in_minutes * 60 -- in seconds
	end	
end

function Wonder_CanTick(can_tick)
	if _wonder.time_victory > 0 then
		for _, player in pairs(PLAYERS) do
			Player_SetStateModelBool(player.id, "is_wonder_construction_enabled", can_tick)	
		end
	end
end

function Wonder_IsSoloVictory(is_solo)
	_wonder.solo_victory = true
end

function Wonder_CanWin(wonder_player, other_player)
	if wonder_player.id == other_player.id then
		return true
	end
	if wonder_player.id ~= other_player.id and not _wonder.solo_victory then
		return true
	end
	
	return false
end


-- Callback invoked when Diplomacy is enabled (indicates win condition should be based on player instead of team).
function Wonder_DiplomacyEnabled(isEnabled)
	_wonder.last_man_standing = isEnabled
end


-- Callback invoked by Core::OnInit()
function Wonder_OnInit()
	
	-- Get global local player
	player_local = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
	
	for _, player in pairs(PLAYERS) do
		player._wonder = {
			entity_id = nil,
			objective_id = nil,
			timer_victory_deterministic = string.format("wonder_victory_timer_%d", player.index),			
			timer_damage = string.format("wonder_damage_timer_%d", player.index),
		}
		Player_SetStateModelBool(player.id, "is_wonder_construction_enabled", true)
	end
	
	ReplayStatViewer_PopulateReplayStatTabs({"WonderTrackerTemplate"})
	ReplayStatViewer_RegisterPlayerDataContextUpdater(Wonder_UpdatePlayerStats)
end


function Wonder_Start()
	
	for _, player in pairs(PLAYERS) do		
		if player.isLocal then
			Wonder_AddObjective1(player)
		end
	end
	
	-- Register callbacks for global events
	Rule_AddGlobalEvent(Wonder_OnConstructionStart, GE_ConstructionStart)
	Rule_AddGlobalEvent(Wonder_OnConstructionComplete, GE_ConstructionComplete) 
	Rule_AddGlobalEvent(Wonder_OnEntityKilled, GE_EntityKilled)
	Rule_AddGlobalEvent(Wonder_OnDamageReceived, GE_DamageReceived)
	Rule_AddGlobalEvent(Wonder_OnLocalPlayerChanged, GE_LocalPlayerChanged)
	
	Rule_AddInterval(Wonder_Update, 1.0)
	Rule_AddInterval(Wonder_CheckVictory, 1.0)
	
	-- Override victory countdown period
	if Misc_IsCommandLineOptionSet("timer") and tonumber(Misc_GetCommandLineString("timer")) ~= nil then
		_wonder.time_victory = tonumber(Misc_GetCommandLineString("timer")) * 60
	end	
end


-- Callback invoked by UpdatePlayerDataContexts() in replaystatviewer.scar to fetch player progress
function Wonder_UpdatePlayerStats(player, scarModel)	
	if not player.isEliminated and player._wonder.entity_id ~= nil and Entity_IsValid(player._wonder.entity_id) then 
		if Timer_Exists(player._wonder.timer_victory_deterministic) then 
			scarModel.Wonder_Target = _wonder.time_victory 								-- in sec
			scarModel.Wonder_Current = Timer_GetRemaining(player._wonder.timer_victory_deterministic) -- in sec	
			return
		elseif Entity_GetBuildingProgress(Entity_FromID(player._wonder.entity_id)) < 1.0 then
			scarModel.Wonder_Target = _wonder.time_victory 	-- in sec
			scarModel.Wonder_Current = 0 					-- in sec	0 : under construction
			return
		end
	end
	scarModel.Wonder_Target = 0 	-- in sec
	scarModel.Wonder_Current = -1 	-- in sec	-1 : not constructed
end


-- Callback invoked by Core_SetPlayerDefeated() when a player is eliminated.
function Wonder_OnPlayerDefeated(player, reason)	
	-- If win was due to Wonder
	if reason == WR_WONDER then
		
		if Player_IsAlive(player.id) then
			-- Kill player
			World_KillPlayer(player.id, KPR_Lost)
		end
	end
end


-- Callback invoked by Core_OnGameOver() 
function Wonder_OnGameOver()

	for _, player in pairs(PLAYERS) do 
		if player._wonder and Timer_Exists(player._wonder.timer_victory_deterministic) then
			Timer_End(player._wonder.timer_victory_deterministic)
		end
	end	
	
	Rule_RemoveGlobalEvent(Wonder_OnConstructionStart)
	Rule_RemoveGlobalEvent(Wonder_OnConstructionComplete)
	Rule_RemoveGlobalEvent(Wonder_OnEntityKilled)
	Rule_RemoveGlobalEvent(Wonder_OnDamageReceived)
	Rule_RemoveGlobalEvent(Wonder_OnLocalPlayerChanged)
	
	Rule_Remove(Wonder_Update)
end



-- Global event callback for GE_ConstructionStart
function Wonder_OnConstructionStart(context)		
	
	-- Get building owner
	local player_owner = Core_GetPlayersTableEntry(context.player)
	-- Get entity being built
	local entity = context.entity
	
	-- If entity is a wonder
	if Entity_IsOfType(entity, _wonder.types.age4) then
		--print(string.format("Wonder_OnConstructionStart() - Player %d (team %d) building %s", player_owner.index, player_owner.team.index, BP_GetName(context.pbg)))
		
		-- Store entity ID on player
		player_owner._wonder.entity_id = Entity_GetID(entity)
		
		-- Reveal Wonder location
		FOW_RevealArea(Entity_GetPosition(entity), _wonder.FOWRadius, -1.0)
		
		-- If local player is not eliminated
		if not player_local.isEliminated then
			-- If building progress is incomplete and owner is not the local player
			if Entity_GetBuildingProgress(entity) < 1.0 and not player_owner.isLocal then
				
				-- Get owner's player colour
				local uiColour = Player_GetUIColour(player_owner.id)
				
				-- Get cue data
				local cue = _wonder.cue
				-- Set cue title
				cue.title = Loc_FormatText(11159074, player_owner.playerName)			-- "%1PLAYER_NAME% is building a Wonder"
				
				-- If wonder owner is local player's ally
				if Player_ObserveRelationship(player_local.id, player_owner.id) == R_ALLY and Wonder_CanWin(player_owner, player_local) then
					
					-- Set cue sfx
					cue.sfx = _wonder.sfx.construction_start_player_team
					-- Create event cue
					Rule_AddOneShot(Wonder_CreateEventCue, 0, { title = cue.title, queue_icon = "", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
					
				-- If wonder owner is local player's enemy
				else
					
					-- Set cue sfx
					cue.sfx = _wonder.sfx.construction_start_enemy_team
					-- Create event cue
					Rule_AddOneShot(Wonder_CreateEventCue, 0, { title = cue.title, queue_icon = "icons\\event_queue_high_priority", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
					
				end
			end												
		end
	end
end


-- Global event callback for GE_ConstructionComplete
function Wonder_OnConstructionComplete(context)	
	
	local player_local = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
	local player_owner = Core_GetPlayersTableEntry(context.player)
	
	if not player_owner.isEliminated  and Entity_IsOfType(context.entity, _wonder.types.age4) then
		player_owner._wonder.entity_id = Entity_GetID(context.entity)
		FOW_RevealArea(Entity_GetPosition(context.entity), _wonder.FOWRadius, -1.0)
		
		-- Start the victory timer across all peers, including those already defeated
		if not Timer_Exists(player_owner._wonder.timer_victory_deterministic) then 
			Timer_Start(player_owner._wonder.timer_victory_deterministic, _wonder.time_victory)
		end
		
		Wonder_AddObjective2(context.player, context.entity)			
	end
end


-- Global event callback for GE_EntityKilled
function Wonder_OnEntityKilled(context)	
	
	-- If entity owner is not nil
	if context.victimOwner ~= nil then
			
		-- If entity is a wonder
		if Entity_IsOfType(context.victim, _wonder.types.age4) then 
			
			-- Get entity owner
			local player_owner = Core_GetPlayersTableEntry(context.victimOwner)	
			
			-- Exclude scuttling of incomplete buildings		
			if Entity_GetBuildingProgress(context.victim) >= 1.0 then		
				
				--print(string.format("Wonder_OnEntityKilled() - Player %d (team %d) lost %s", player_owner.index, player_owner.team.index, BP_GetName(Entity_GetBlueprint(context.victim))))
				
				-- If entity owner's wonder id matches the destroyed building
				if player_owner._wonder.entity_id == Entity_GetID(context.victim) then
					
					-- Unreveal FOW around destroyed wonder
					FOW_UnRevealArea(Entity_GetPosition(context.victim))
					player_owner._wonder.entity_id = nil
				end
				
				-- Remove destroy wonder objective
				Wonder_RemoveObjective2(player_owner)
				
				-- If local player is not eliminated
				if not player_local.isEliminated then
					
					-- Reset music
					Music_UnlockIntensity()
					ResetMinimumIntensityMusicUnforced()
					-- Play mix event
					Sound_Play2D(_wonder.sfx.sfx_victory_timer_mix_reset_event)
					
					-- For every timer threshold
					for i = 1, #_wonder.countdown_notifications do 
		
						-- Reset trigger tracker
						_wonder.countdown_notifications[i].triggered = false
						
					end
					
					-- If wonder owner is not eliminated and there is a valid killer
					if not player_owner.isEliminated and context.killer ~= nil then
						
						-- Get destroyed cue
						local cue = _wonder.cueDestroyed
						
						-- If player destroyed own wonder
						if (context.killer == context.victim) then

							-- Get owner player's colour
							local uiColour = Player_GetUIColour(context.victimOwner)
							
							-- If wonder owner is local player
							if player_owner.isLocal then
							
								-- Set cue title
								cue.title = 11159075	-- "Wonder destroyed"
								-- Set cue sfx
								cue.sfx = _wonder.sfx.destroyed_player
								-- Trigger event cue
								Rule_AddOneShot(Wonder_CreateEventCue, _wonder.event_cue_delay, { title = cue.title, queue_icon = "icons\\event_queue_high_priority", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
								
							-- If wonder owner is not local player
							else
								
								-- If wonder owner is local player's ally
								if Player_ObserveRelationship(player_local.id, player_owner.id) == R_ALLY and Wonder_CanWin(player_owner, player_local) then
									
									-- Set cue title
									cue.title = Loc_FormatText(11159076, player_owner.playerName)	-- "%1PLAYER_NAME%'s Wonder destroyed"
									-- Set cue sfx
									cue.sfx = _wonder.sfx.destroyed_ally
									-- Trigger event cue
									Rule_AddOneShot(Wonder_CreateEventCue, _wonder.event_cue_delay, { title = cue.title, queue_icon = "icons\\event_queue_high_priority", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
									
								-- If wonder owner is local player's enemy
								else
									
									-- Set cue title
									cue.title = Loc_FormatText(11159076, player_owner.playerName)	-- "%1PLAYER_NAME%'s Wonder destroyed"
									-- Set cue sfx
									cue.sfx = _wonder.sfx.destroyed_enemy
									-- Trigger event cue
									Rule_AddOneShot(Wonder_CreateEventCue, _wonder.event_cue_delay, { title = cue.title, queue_icon = "icons\\event_queue_high_priority", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
									
								end
							end
							
							-- End this function
							return
							
						end
						
						-- Get attacking player
						local player_attacker = Entity_GetPlayerOwner(context.killer)
						-- Get attacker player's colour
						local uiColour = Player_GetUIColour(player_attacker)
						
						-- If wonder owner is local player
						if player_owner.isLocal then	
							
							-- Set cue title
							cue.title = 11198645									-- "Enemy destroyed Wonder"
							-- Set cue sfx
							cue.sfx = _wonder.sfx.destroyed_player
							
							-- Trigger event cue
							Rule_AddOneShot(Wonder_CreateEventCue, _wonder.event_cue_delay, { title = cue.title, queue_icon = "icons\\event_queue_high_priority", sfx = cue.sfx, uiColour = uiColour, highPriority =  true})
							
						-- If wonder owner is not local player
						else 
							
							-- If wonder owner is local player's ally
							if Player_ObserveRelationship(player_local.id, player_owner.id) == R_ALLY and Wonder_CanWin(player_owner, player_local) then
								
								-- Set cue title
								cue.title = Loc_FormatText(11198646, player_owner.playerName)	-- "Enemy destroyed %1PLAYER_NAME%'s Wonder"
								-- Set cue sfx
								cue.sfx = _wonder.sfx.destroyed_ally
								
								-- Trigger event cue
								Rule_AddOneShot(Wonder_CreateEventCue, _wonder.event_cue_delay, { title = cue.title, queue_icon = "icons\\event_queue_high_priority", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
								
							-- If wonder owner is local player's enemy
							else
								
								-- If attacking player is local player
								if player_attacker == player_local.id then
									
									-- Set cue title
									cue.title = Loc_FormatText(11198647, player_owner.playerName)	-- "DestroyedÂ %1PLAYER_NAME%'s Wonder"
									-- Set cue sfx
									cue.sfx = _wonder.sfx.destroyed_enemy
									
									-- Trigger event cue
									Rule_AddOneShot(Wonder_CreateEventCue, _wonder.event_cue_delay, { title = cue.title, queue_icon = "", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
								
								-- If attacking player is local player's ally
								elseif Player_ObserveRelationship(player_local.id, player_attacker) == R_ALLY then
									
									-- Set cue title
									cue.title = Loc_FormatText(11198648, player_owner.playerName)	-- "Ally destroyedÂ %1PLAYER_NAME%'s Wonder"
									-- Set cue sfx
									cue.sfx = _wonder.sfx.destroyed_enemy
									
									-- Trigger event cue
									Rule_AddOneShot(Wonder_CreateEventCue, _wonder.event_cue_delay, { title = cue.title, queue_icon = "", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
									
								-- If attacking player is local player's enemy
								else
									
									-- Set cue title
									cue.title = Loc_FormatText(11198649, player_owner.playerName)	-- "Enemy destroyedÂ %1PLAYER_NAME%'s Wonder"
									-- Set cue sfx
									cue.sfx = _wonder.sfx.destroyed_enemy
									
									-- Trigger event cue
									Rule_AddOneShot(Wonder_CreateEventCue, _wonder.event_cue_delay, { title = cue.title, queue_icon = "", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
									
								end
							end
						end
					end
				end
			end
		end
	end
end

-- Global event callback for GE_DamageReceived
function Wonder_OnDamageReceived(context)
	
	-- If victim and attacker are not nil
	if context.victim ~= nil and context.attacker ~= nil and context.attackerOwner ~= nil then
		
		-- If entity is owned by a player and is a wonder
		if not World_OwnsEntity(context.victim) and Entity_IsOfType(context.victim, _wonder.types.age4) then 
			
			-- Exclude scuttling of incomplete buildings		
			if Entity_GetBuildingProgress(context.victim) >= 1.0 then
				
				-- Get wonder owner
				local player_owner = Core_GetPlayersTableEntry(context.victimOwner)
				
				-- If owner is not eliminated
				if not player_owner.isEliminated
					and not player_local.isEliminated 
					and player_owner._wonder.entity_id == Entity_GetID(context.victim) 
					and (not Timer_Exists(player_owner._wonder.timer_damage) or Timer_GetRemaining(player_owner._wonder.timer_damage) == 0.0) then 
					
					-- If player destroyed own wonder (causes damage event to fire) or Landmark is being repaired
					if (context.attacker == context.victim) or context.isRepairing then
						
						-- end function
						return
						
					end
					
					-- Start wonder damage timer
					Timer_Start(player_owner._wonder.timer_damage, _wonder.interval_damage)
					
					-- Get attacking player's colour
					local uiColour = Player_GetUIColour(context.attackerOwner)
					
					-- Get cue data
					local cue = _wonder.cueDamaged
					
					-- If wonder owner is local player
					if player_owner.isLocal then
						
						-- Set cue title
						cue.title = 11198636									-- "Enemy attacking Wonder"
						-- Set cue sfx
						cue.sfx = _wonder.sfx.damaged_player_team
						
						--Notify player that Wonder is under attack
						Rule_AddOneShot(Wonder_CreateEventCue, _wonder.event_cue_delay, { title = cue.title, queue_icon = "icons\\event_queue_high_priority", sfx = cue.sfx, uiColour = uiColour, highPriority =  true})
						
						-- If wonder owner is not local player
					else
						
						-- If wonder owner is local player's ally
						if Player_ObserveRelationship(player_local.id, player_owner.id) == R_ALLY and Wonder_CanWin(player_owner, player_local) then
							
							-- Set cue title
							cue.title = Loc_FormatText(11198637, player_owner.playerName)	-- "Enemy attackingÂ %1PLAYER_NAME%'s Wonder"
							-- Set cue sfx
							cue.sfx = _wonder.sfx.damaged_player_team
							
							--Notify player that ally's Wonder is under attack
							Rule_AddOneShot(Wonder_CreateEventCue, _wonder.event_cue_delay, { title = cue.title, queue_icon = "icons\\event_queue_high_priority", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
							
						end
					end
				end
			end	
		end
	end
end

-- Called when local player is changed
function Wonder_OnLocalPlayerChanged(context)
	
	player_local = Core_GetPlayersTableEntry(context.player)

end

-----------------------------------------------------------------------
-- Rules
-----------------------------------------------------------------------


function Wonder_Update()
	
	-- For every player
	for i, player in pairs(PLAYERS) do
		
		-- If player is eliminated and has a wonder objective
		if player.isEliminated and player._wonder.objective_id ~= nil then  
			
			-- Remove wonder objective
			Obj_Delete(player._wonder.objective_id)
			player._wonder.objective_id = nil
			
			-- If wonder timer exists
			if Timer_Exists(player._wonder.timer_victory_deterministic) then
				
				-- End and reset timer
				Timer_End(player._wonder.timer_victory_deterministic)
				Player_SetStateModelFloat(player.id, "wonder_timer", 0)
			end	
		-- If player is not eliminated and has wonder objective
		elseif not player.isEliminated and player._wonder.entity_id ~= nil and Entity_IsValid(player._wonder.entity_id) then
						
			-- If timer exists
			if Timer_Exists(player._wonder.timer_victory_deterministic) then
				
				-- Update timer 
				Obj_SetCounterTimerSeconds(player._wonder.objective_id, Timer_GetRemaining(player._wonder.timer_victory_deterministic))

				-- "wonder_timer" is set across all peers, including those already defeated
				Player_SetStateModelFloat(player.id, "wonder_timer", Timer_GetRemaining(player._wonder.timer_victory_deterministic))
				
				-- For every timer threshold
				for j = 1, #_wonder.countdown_notifications do 
					
					-- If threshold notification has not been triggered AND timer is in threshold window
					if not _wonder.countdown_notifications[j].triggered and _wonder.countdown_notifications[j].time == math.ceil(Timer_GetRemaining(player._wonder.timer_victory_deterministic)) then 
						
						-- Track as triggered
						_wonder.countdown_notifications[j].triggered = true
						
						-- Track if player's ally owns wonder
						local ally_owns_wonder = nil
						
						-- If wonder owner is on local player's ally
						if Player_ObserveRelationship(player_local.id, player.id) == R_ALLY and Wonder_CanWin(player, player_local) then
							
							-- Ally owns wonder
							ally_owns_wonder = true
							
						else
							
							-- Ally owns wonder
							ally_owns_wonder = false
							
						end
						
						-- Get wonder owner colour
						local uiColour = Player_GetUIColour(player.id)
						-- Get destroyed cue
						local cue = _wonder.cueCountdown
						
						-- If first notification triggered 
						if j == 1 then 
							
							-- Increase music tempo
							Music_LockIntensity(MUSIC_TENSE, -1)
							
							-- If local player's ally is nearing victory
							if ally_owns_wonder then
								
								-- Add time remaining to cue text
								cue.title = Loc_FormatText(11197864, 3)			-- "%1MINUTES_REMAINING% minutes until Wonder Victory"
								-- Set cue sfx
								cue.sfx = _wonder.sfx.sfx_victory_timer_first
							
								--Notify player that 3 minutes remain
								Rule_AddOneShot(Wonder_CreateEventCue, 0, { title = cue.title, queue_icon = "", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
							
							-- If local player's enemy is nearing victory
							else
								-- Add time remaining to cue text
								cue.title = Loc_FormatText(11197865, 3)			-- "%1MINUTES_REMAINING% minutes until Wonder Defeat"
								-- Set cue sfx
								cue.sfx = _wonder.sfx.sfx_victory_timer_first
							
								--Notify player that 3 minutes remain
								Rule_AddOneShot(Wonder_CreateEventCue, 0, { title = cue.title, queue_icon = "icons\\event_queue_high_priority", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
								
							end
							
						-- If second 
						elseif j == 2 then 
							
							-- Increase music tempo
							Music_LockIntensity(MUSIC_TENSE_COMBAT_RARE, -1)
							
							-- If local player's ally is nearing victory
							if ally_owns_wonder then
								
								-- Add time remaining to cue text
								cue.title = Loc_FormatText(11197864, 2)			-- "%1MINUTES_REMAINING% minutes until Wonder Victory"
								-- Set cue sfx
								cue.sfx = _wonder.sfx.sfx_victory_timer_second
							
								--Notify player that 2 minutes remain
								Rule_AddOneShot(Wonder_CreateEventCue, 0, { title = cue.title, queue_icon = "", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
							
							-- If local player's enemy is nearing victory
							else
								-- Add time remaining to cue text
								cue.title = Loc_FormatText(11197865, 2)			-- "%1MINUTES_REMAINING% minutes until Wonder Defeat"
								-- Set cue sfx
								cue.sfx = _wonder.sfx.sfx_victory_timer_second
							
								--Notify player that 2 minutes remain
								Rule_AddOneShot(Wonder_CreateEventCue, 0, { title = cue.title, queue_icon = "", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
								
							end
							
						-- If last notification triggered 
						elseif j == #_wonder.countdown_notifications then 
							
							-- Get time remaining on wonder timer
							local time_remaining = _wonder.countdown_notifications[j].time
							
							-- Increase music tempo
							Music_LockIntensity(MUSIC_RARE, time_remaining)
							
							-- If local player's ally is nearing victory
							if ally_owns_wonder then
								
								-- Add time remaining to cue text
								cue.title = Loc_FormatText(11197866, 2)			-- "1 minute until Wonder Victory"
								-- Set cue sfx
								cue.sfx = _wonder.sfx.sfx_victory_timer_final
							
								--Notify player that 1 minute remains
								Rule_AddOneShot(Wonder_CreateEventCue, 0, { title = cue.title, queue_icon = "", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
							
							-- If local player's enemy is nearing victory
							else
								
								-- Add time remaining to cue text
								cue.title = Loc_FormatText(11197867, 2)			-- "1 minute until Wonder Defeat"
								-- Set cue sfx
								cue.sfx = _wonder.sfx.sfx_victory_timer_final
							
								--Notify player that 1 minute remains
								Rule_AddOneShot(Wonder_CreateEventCue, 0, { title = cue.title, queue_icon = "", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
								
								-- Trigger Mix Event
								Sound_Play2D(_wonder.sfx.sfx_victory_timer_mix_event)
								
							end
						end
					end
				end
				
				-- If countdown reaches 0
				if Timer_GetRemaining(player._wonder.timer_victory_deterministic) == 0 then
					
					-- Stop Music
					Music_PersistentStop()
					
				end
			end			
		end
	end
end


function Wonder_CheckVictory()	

	local winning_player = nil
	
	for _, player in pairs(PLAYERS) do	
		if Timer_Exists(player._wonder.timer_victory_deterministic) and Timer_GetRemaining(player._wonder.timer_victory_deterministic) == 0 then
			if player._wonder.objective_id ~= nil then
				if Player_ObserveRelationship(player.id, player_local.id) == R_ALLY and Wonder_CanWin(player, player_local) then 
					Obj_SetState(player._wonder.objective_id, OS_Complete)
				else
					Obj_SetState(player._wonder.objective_id, OS_Failed)
				end
			end
			winning_player = player
			break
		end
	end
	
	if winning_player ~= nil then
		Core_OnGameOver()
		Rule_RemoveMe()
		
		-- For every player
		for i, player in pairs(PLAYERS) do
			
			-- If player is winning player's ally
			if Player_ObserveRelationship(player.id, winning_player.id) == R_ALLY and Wonder_CanWin(player, winning_player) then
				Core_SetPlayerVictorious(player.id, Wonder_WinnerPresentation, WR_WONDER)	
			-- If player is winning player's enemy
			else
				Core_SetPlayerDefeated(player.id, Wonder_LoserPresentation, WR_WONDER)
			end
		end
	end
end

-----------------------------------------------------------------------
-- UI Functions
-----------------------------------------------------------------------


-- Adds "Build a wonder" objective
function Wonder_AddObjective1(player)
	
	if player.isLocal and not player.isEliminated and player._wonder.entity_id == nil and player._wonder.objective_id == nil then
		
		-- Set primary objective to use DT_PRIMARY_OR template if it's not first in objective list
		local data_template = "WonderOrObjectiveTemplate"
		if _first_primary_objective == nil then 
			data_template = "WonderObjectiveTemplate"
		end	
		
		player._wonder.objective_id = Obj_Create(player.id, 11159068, Loc_Empty(), _wonder.icons.objective, data_template, player.raceName, OT_Primary, 0, "wonderObj")		-- "Build a Wonder"
		
		if _first_primary_objective == nil then 
			_first_primary_objective = player._wonder.objective_id
		end
		
		Obj_SetState(player._wonder.objective_id, OS_Incomplete)
		Obj_SetVisible(player._wonder.objective_id, true)
	end	
end


-- Changes "Build wonder" objective to "Defend wonder". Adds "Destroy wonder" objective for opponents.
function Wonder_AddObjective2(ownerID, wonder_entity)
	
	local player_owner = Core_GetPlayersTableEntry(ownerID)
	local player_local = Core_GetPlayersTableEntry(Game_GetLocalPlayer())	
	local title = 11159071												--  "Defend your Wonder"
		
	if player_owner.isLocal then 			
		Obj_SetTitle(player_owner._wonder.objective_id, title)
		Sound_Play2D(_wonder.sfx.countdown_start_player)	
	elseif Player_ObserveRelationship(player_owner.id, player_local.id) == R_ALLY and Wonder_CanWin(player_owner, player_local) then 
		title = Loc_FormatText(11159070, player_owner.playerName)		-- "Defend %1PLAYER_NAME%'s Wonder"			
		player_owner._wonder.objective_id = Obj_Create(player_local.id, title, Loc_Empty(),  _wonder.icons.objective, "WonderObjectiveTemplate", player_local.raceName, OT_Primary, 0, "defendWonderObj")
		Sound_Play2D(_wonder.sfx.countdown_start_ally)
	else
		title = Loc_FormatText(11159069, player_owner.playerName)		-- "Destroy %1PLAYER_NAME%'s Wonder"
		player_owner._wonder.objective_id = Obj_Create(player_local.id, title, Loc_Empty(), _wonder.icons.destroy, "WonderObjectiveTemplate", player_local.raceName, OT_Primary, 0, "destroyWonderObj")
		Sound_Play2D(_wonder.sfx.countdown_start_enemy)
	end	
		
	Obj_SetCounterType(player_owner._wonder.objective_id, COUNTER_TimerDecreasing)
	Obj_SetCounterTimerSeconds(player_owner._wonder.objective_id, Timer_GetRemaining(player_owner._wonder.timer_victory_deterministic))		
	Obj_SetState(player_owner._wonder.objective_id, OS_Incomplete)
	Obj_SetVisible(player_owner._wonder.objective_id, true)
	Obj_CreatePopup(player_owner._wonder.objective_id, title)
end



-- Removes 'Defend/destroy wonder' objective and timer if player's wonder is no longer valid.
function Wonder_RemoveObjective2(player_owner)
	
	local player_local = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
	
	if Timer_Exists(player_owner._wonder.timer_victory_deterministic) then
		Timer_End(player_owner._wonder.timer_victory_deterministic)
	end

	if not player_local.isEliminated then
		Music_UnlockIntensity()
		
		for _, notification in pairs(_wonder.countdown_notifications) do 
			notification.triggered = false
		end
			
		if player_owner._wonder.objective_id then
			if player_owner.isLocal then
				local title = 11159068		-- "Build a Wonder"
				Obj_SetTitle(player_owner._wonder.objective_id, title)
				Obj_SetCounterType(player_owner._wonder.objective_id, COUNTER_None)
			else
				Obj_Delete(player_owner._wonder.objective_id)
				player_owner._wonder.objective_id = nil
			end
		end
	end
end


--Removes all objectives regardless of wonder state (called at match end, for example)
function Wonder_RemoveObjectives()
	for i, player in pairs(PLAYERS) do 
		if player._wonder.objective_id ~= nil then
			Obj_SetVisible(player._wonder.objective_id, false)
		end
		if Timer_Exists(player._wonder.timer_victory_deterministic) then
			Timer_End(player._wonder.timer_victory_deterministic)
		end
	end
end

-- Event cue function to support delayed events
function Wonder_CreateEventCue(context, data)
	
	-- If event should play in event queue and center screen notification (note: uses high priority icons by default)
	if data.highPriority then
		
		UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, data.title, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority", data.sfx, data.uiColour.r, data.uiColour.g, data.uiColour.b, data.uiColour.a, ECV_Queue, nothing)
		UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, data.title, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority_large", "", data.uiColour.r, data.uiColour.g, data.uiColour.b, data.uiColour.a, ECV_Title, nothing)
	
	-- If event should only play in event queue (note: uses either high priority icon or if not path is specified, the objective arrow icon)
	else
		
		UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, data.title, Loc_Empty(), "event_with_player_color", data.queue_icon, data.sfx, data.uiColour.r, data.uiColour.g, data.uiColour.b, data.uiColour.a, ECV_Queue, nothing)
		
	end
	
end

-- Win/Lose Presentation Functions
function Wonder_WinnerPresentation(playerID)
		
	if playerID == Game_GetLocalPlayer() then
		local objective = nil
		local title = 11159071													-- "Defend your Wonder"
		for i, player in pairs(PLAYERS) do
			if player._wonder.objective_id ~= nil and Obj_GetState(player._wonder.objective_id) == OS_Complete then
				objective = player._wonder.objective_id
				if not player.isLocal then 
					title = Loc_FormatText(11159070, player.playerName)			-- "Defend %1PLAYER_NAME%'s Wonder"
				end
				break
			end
		end
		
		Misc_ClearSelection()
		Taskbar_SetVisibility(false)		
		
		Obj_CreatePopup(objective, title)
		Music_PlayStinger(MUS_STING_PRIMARY_OBJ_COMPLETE_ENDGAME)
		
		Wonder_RemoveObjectives()
				
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, {
			_playerID = playerID, 
			_icon = _wonder.icons.objective, 
			_endType = Loc_GetString(11161277), 		-- "VICTORY"
			_message = Loc_Empty(), 					-- Unused
			_sound = "DefendWonderVictoryEvent", 
			_videoURI = "stinger_victory"
		})
	end
end


function Wonder_LoserPresentation(playerID)
	if playerID == Game_GetLocalPlayer() then		
		local objective = nil
		local title = Loc_Empty()
		for i, player in pairs(PLAYERS) do
			if player._wonder.objective_id ~= nil and Obj_GetState(player._wonder.objective_id) == OS_Failed then
				objective = player._wonder.objective_id
				title = Loc_FormatText(11159069, player.playerName)				-- "Destroy %1PLAYER_NAME%'s Wonder"
				break
			end
		end
		
		Misc_ClearSelection()
		Taskbar_SetVisibility(false)

		Obj_CreatePopup(objective, title)
		Music_PlayStinger(MUS_STING_PRIMARY_OBJ_FAIL)
		
		Wonder_RemoveObjectives()
		
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, {
			_playerID = playerID, 
			_icon = _wonder.icons.objective, 
			_endType = Loc_GetString(11165094),			-- "DEFEAT" 
			_message = Loc_Empty(), 					-- Unused
			_sound = "DefendWonderDefeatEvent", 
			_videoURI = "stinger_defeat"
		})
	end
end
