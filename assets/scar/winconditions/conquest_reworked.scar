s = {
	damage_interval = 30.0,
	event_cue_delay = 2.0,
	presentation_delay = 2.0,
	sfx = {
		landmark_damaged_player = "mus_stinger_landmark_building_damaged",
		landmark_destroyed_player = "mus_stinger_players_landmark_destroyed",
		landmark_destroyed_ally = "mus_stinger_ally_landmark_destroyed",
		landmark_destroyed_enemy = "mus_stinger_enemy_landmark_destroyed",
		eliminated_player_ally = "Conquest_friendly_eliminated",
		eliminated_enemy = "Conquest_enemy_eliminated",
	},

	cue_destroyed = {			-- event cue shown when capital or landmark is destroyed 
		title = Loc_Empty(),
		desc = Loc_Empty(),
		icon = "icons\\event_queue_high_priority_large",
		template = "high_priority", 
		style = ECV_Queue | ECV_Title,
	},	
	cue_eliminated = {			-- event cue shown when player is eliminated 
		title = Loc_Empty(),
		desc = Loc_Empty(),
		icon = "",
		template = "high_priority", 
		style = ECV_Queue,
},}


-- Start function
function Conquest_Start()
	
	-- Add conquest objectives
	Conquest_AddObjective()
	-- Update objectives
	Conquest_UpdateObjective()
	-- Add rule to check for elimination
	Rule_AddInterval(Conquest_CheckElimination, 1.0)
	
end


-- Callback invoked by Core_OnGameOver() 
function Conquest_OnGameOver()
	
	-- Remove rules on game over
	Rule_Remove(Conquest_CheckElimination)
	
end


-- Callback invoked by Core_AddPlayerToTeam()
function Conquest_OnPlayerJoinedTeam(playerData)
	
	-- Update objectives when player added to team
	Conquest_UpdateObjective()
end



-----------------------------------------------------------------------
-- Rules
-----------------------------------------------------------------------

-- Eliminates player/team when they have lost all landmarks 
function Conquest_CheckElimination()
 
	Conquest_UpdateObjective()
			
	--[[Player Elimination Check]]--
				
	-- For every player
	for j, player in pairs(PLAYERS) do
		
		-- If player is not eliminated
		if not Core_IsPlayerEliminated(player.id) then
			
			-- Get player Landmarks built vs remaining
			local player_landmarks = Conquest_GetPlayerLandmarkCount(player)
			
			-- If all Player Landmarks are destroyed
			if player_landmarks.built > 0 and player_landmarks.remaining == 0 then  
				
				-- Hides repair UI for eliminated player
				Player_SetStateModelBool(player.id, "disable_landmark_rebuild", true)
				-- Fully destroy player's TC/Landmarks to disable ally repair
				Conquest_DestroyLandmarks(player)
				
				Core_SetPlayerDefeated(player.id, Conquest_LoserPresentation, WR_CONQUEST)
																	
				--print(string.format("Conquest_CheckElimination() - Player %d (team %d) eliminated.", player.index, player.team.index))
			end
		end
	end
			
	-- For every player
	for j, player in pairs(PLAYERS) do
		
		-- For every player Landmark
		for id, landmark in pairs(player.landmarks) do
			
			-- If Landmark is still considered active but is destroyed or in deactivated state
			if landmark.landmark_active and (not Entity_IsValid(id) or not Entity_GetStateModelBool(Entity_FromID(id), "landmark_active")) then
				
				-- Track deactivated Landmark
				landmark.landmark_active = false
				
				-- Get player Landmarks built vs remaining
				local player_landmarks = Conquest_GetPlayerLandmarkCount(player)
				-- Get Ally Landmarks built/remaining
				local ally_landmarks = Conquest_GetAllyLandmarkCount(player)
				
				-- If local player is not eliminated and conquest objective is active, also checks that last attacker is not null
				if not Core_IsPlayerEliminated(Game_GetLocalPlayer()) and _conquest.objective ~= nil and landmark.last_attacker then 	
					
					-- Get destroyed cue
					local cue = _conquest.cue_destroyed
						
					-- Get attacking player's colour
					local uiColour = Player_GetUIColour(landmark.last_attacker)
						
					-- If owner is local
					if player.isLocal then

						-- Set cue title
						cue.title = 11198267 										-- "Enemy destroyed Landmark"
						
						-- If player's last remaining Landmark
						if player_landmarks.built > 0 and player_landmarks.remaining == 0 then
							
							-- If not player or ally's last remaining Landmark (otherwise, failed objective sfx plays)
							if ally_landmarks.built > 0 and ally_landmarks.remaining > 0 then
								
								-- Set cue sfx
								cue.sfx = _conquest.sfx.eliminated_player_ally
								
							end
							
						-- If not player's last remaining Landmark
						else
							
							-- Set cue sfx
							cue.sfx = _conquest.sfx.landmark_destroyed_player
							
						end
						
						--Notify local player (the owner) that Landmark is destroyed
						Rule_AddOneShot(Conquest_CreateEventCue, _conquest.event_cue_delay, { title = cue.title, queue_icon = "icons\\event_queue_high_priority", sfx = cue.sfx, uiColour = uiColour, highPriority =  true})
						
					else
						
						-- If owner is local player's ally
						if Player_ObserveRelationship(player_local.id, player.id) == R_ALLY then
					
							-- Set cue title
							cue.title = Loc_FormatText(11198268, player.playerName)		-- Enemy destroyed %1PLAYER_NAME%'s Landmark
							
							-- If player's last remaining Landmark
							if player_landmarks.built > 0 and player_landmarks.remaining == 0 then
								
								-- If not player or ally's last remaining Landmark (otherwise, failed objective sfx plays)
								if ally_landmarks.built > 0 and ally_landmarks.remaining > 0 then
									
									-- Play eliminated sfx
									cue.sfx = _conquest.sfx.eliminated_player_ally
									
								end
								
							-- If not player's last remaining Landmark
							else
								
								-- Set cue sfx
								cue.sfx = _conquest.sfx.landmark_destroyed_ally
								
							end
							
							--Notify local player that ally's Landmark is destroyed
							Rule_AddOneShot(Conquest_CreateEventCue, _conquest.event_cue_delay, { title = cue.title, queue_icon = "icons\\event_queue_high_priority", sfx = cue.sfx, uiColour = uiColour, highPriority =  true})
						
						-- If the owner is an enemy
						else
							
							-- If attacking player is the local player
							if landmark.last_attacker == player_local.id then
								
								-- Set cue title
								cue.title = Loc_FormatText(11198590, player.playerName)		-- Destroyed %1PLAYER_NAME%'s landmark
								
							-- If attacking player is local player's ally
							elseif Player_ObserveRelationship(player_local.id, landmark.last_attacker) == R_ALLY then
								
								-- Set cue title
								cue.title = Loc_FormatText(11198591, player.playerName)		-- Ally destroyed %1PLAYER_NAME%'s landmark
								
							-- If attacking player is an enemy
							else
								
								-- Set cue title
								cue.title = Loc_FormatText(11201826, player.playerName)		-- Enemy destroyed %1PLAYER_NAME%'s landmark
								
							end
							
							-- Get number of enemies remaining
							local enemies_remaining = Conquest_GetActiveEnemyCount(player_local)
							
							-- If player's last remaining Landmark and at least 1 enemy remains (otherwise, objective sfx plays)
							if player_landmarks.built > 0 and player_landmarks.remaining == 0 and enemies_remaining > 0 then
								
								-- Set cue sfx
								cue.sfx = _conquest.sfx.eliminated_enemy
								
							-- If not player's last remaining Landmark
							else
								
								-- Set cue sfx
								cue.sfx = _conquest.sfx.landmark_destroyed_enemy
								
							end
							
							-- Notify that enemy Landmark is destroyed
							Rule_AddOneShot(Conquest_CreateEventCue, _conquest.event_cue_delay, { title = cue.title, queue_icon = "", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})
							
						end
					end
				end							
			end
		end
	end
end

-----------------------------------------------------------------------
-- Private/Internal functions
-----------------------------------------------------------------------


-- Returns number of Landmarks a player has built/remaining
function Conquest_GetPlayerLandmarkCount(player)
	
	-- Track Landmarks
	local player_landmarks = {
		built = 0,
		remaining = 0,
	}
	
	-- For every player Landmark
	for id, landmark in pairs(player.landmarks) do
		
		-- Increment Landmark count
		player_landmarks.built = player_landmarks.built + 1
		
		-- If Landmark is not destroyed
		if Entity_IsValid(id) and Entity_GetStateModelBool(Entity_FromID(id), "landmark_active") then 
			
			-- Incremement Landmarks remaining
			player_landmarks.remaining = player_landmarks.remaining + 1
		end
		
	end
	
	-- Return Landmark data
	return player_landmarks
	
end

-- Returns number of Allied Landmarks standing for a given player (including given player)
function Conquest_GetAllyLandmarkCount(player)
	
	local ally_landmarks = {
		built = 0,
		remaining = 0,
	}
	
	-- For every player
	for j, player_other in pairs(PLAYERS) do
		
		-- If players are Allies
		if Player_ObserveRelationship(player.id, player_other.id) == R_ALLY then
			
			-- For every player Landmark
			for id, landmark in pairs(player_other.landmarks) do
			
				-- Increment Landmark count
				ally_landmarks.built = ally_landmarks.built + 1
				
				-- If Landmark is not destroyed
				if Entity_IsValid(id) and Entity_GetStateModelBool(Entity_FromID(id), "landmark_active") then 
					
					-- Incremement Landmarks remaining
					ally_landmarks.remaining = ally_landmarks.remaining + 1
				end
			end
		end
	end
	
	-- Return Landmark data
	return ally_landmarks
	
end

-- Returns number of Enemy Landmarks standing for a given player
function Conquest_GetEnemyLandmarkCount(player)
	
	local enemy_landmarks = {
		built = 0,
		remaining = 0,
	}
	
	-- For every player
	for j, player_other in pairs(PLAYERS) do
		
		-- If players are Enemies
		if Player_ObserveRelationship(player.id, player_other.id) == R_ENEMY then
			
			-- For every player Landmark
			for id, landmark in pairs(player_other.landmarks) do
			
				-- Increment Landmark count
				enemy_landmarks.built = enemy_landmarks.built + 1
				
				-- If Landmark is not destroyed
				if Entity_IsValid(id) and Entity_GetStateModelBool(Entity_FromID(id), "landmark_active") then 
					
					-- Incremement Landmarks remaining
					enemy_landmarks.remaining = enemy_landmarks.remaining + 1
				end
			end
		end
	end
	
	-- Return Landmark data
	return enemy_landmarks
	
end

-- Returns number of enemies remaining for a given player
function Conquest_GetActiveEnemyCount(player)
	
	-- Track enemies remaining
	local enemies_remaining = {}
	
	-- For every other player
	for i, player_other in pairs(PLAYERS) do
		
		-- If other player is not the given player, is an enemy, and is not eliminated
		if player ~= player_other and not Core_IsPlayerEliminated(player_other.id) and Player_ObserveRelationship(player.id, player_other.id) == R_ENEMY then 
			
			-- Add enemy player to table
			table.insert(enemies_remaining, player_other)
		end
	end
	
	-- Return number of enemies remaining
	return #enemies_remaining
end

-- Destroy a player's TC/Landmarks so they cannot be repaired by an ally (e.g. on player elimination)
function Conquest_DestroyLandmarks(player)
	
	-- For every player Landmark
	for id, landmark in pairs(player.landmarks) do
		
		-- Kills entity (note: this function executes final destruction animation vs Entity_Destroy which despawns the entity).
		Entity_Kill(landmark.entity)
		
	end
end

-----------------------------------------------------------------------
-- UI Functions
-----------------------------------------------------------------------

function Conquest_AddObjective()	
	if _conquest.objective == nil then 
		local localPlayer = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
		local enemies = 0
		

		-- Set primary objective data template (Note: No OR needed as Conquest always precedes other objectives)				
		if _first_primary_objective == nil then 
			_first_primary_objective = _conquest.objective
		end
		
		
		Obj_SetState(_conquest.objective, OS_Incomplete)
		Obj_SetVisible(_conquest.objective, true)
		Obj_SetProgressVisible(_conquest.objective, true)		
		Obj_SetCounterType(_conquest.objective, COUNTER_CountUpTo)
	end
end


function Conquest_UpdateObjective()
	if _conquest.objective ~= nil then
		local localPlayer = Core_GetPlayersTableEntry(Game_GetLocalPlayer())		
		local landmarks_destroyed = 0
		enemy_landmarks = Conquest_GetEnemyLandmarkCount(localPlayer)
		landmarks_destroyed = enemy_landmarks.built - enemy_landmarks.remaining
		
		Obj_SetCounterCount(_conquest.objective, landmarks_destroyed)
		Obj_SetCounterMax(_conquest.objective, enemy_landmarks.built)	
		Obj_SetProgress(_conquest.objective, landmarks_destroyed / enemy_landmarks.built)
	end
end


function Conquest_RemoveObjective()
	if _conquest.objective ~= nil then
		Obj_SetVisible(_conquest.objective, false)		
		_conquest.objective = nil
	end	
end			


function Conquest_SetPlayerDefeated(context, data)

	Core_SetPlayerDefeated(data.player_id, Conquest_LoserPresentation, WR_CONQUEST)
	
end

-- Win/Lose Presentation Functions
function Conquest_WinnerPresentation(playerID)
	
	Rule_AddOneShot(Conquest_DelayedWinnerPresentation, AGS_EVENT_CUE_DELAY, {playerID = playerID})
	
end

function Conquest_DelayedWinnerPresentation(context, data)
	
	if data.playerID == Game_GetLocalPlayer() then
		Misc_ClearSelection()
		Taskbar_SetVisibility(false)		
		
		Obj_SetState(_conquest.objective, OS_Complete)
		Obj_CreatePopup(_conquest.objective, _conquest.objective_title)
		Music_PlayStinger(MUS_STING_PRIMARY_OBJ_COMPLETE_ENDGAME)
		Conquest_RemoveObjective()
		
		Rule_AddOneShot(_gameOver_message)
	end
	
end

function Conquest_LoserPresentation(playerID)
	
	Rule_AddOneShot(Conquest_DelayedLoserPresentation, AGS_EVENT_CUE_DELAY, {playerID = playerID})
	
end


function Conquest_SetupFailStinger()
	Misc_ClearSelection()
	Taskbar_SetVisibility(false)
	Obj_SetState(_conquest.objective, OS_Failed)		
	Obj_CreatePopup(_conquest.objective, _conquest.objective_title)
	Music_PlayStinger(MUS_STING_PRIMARY_OBJ_FAIL)
end

function Conquest_DelayedLoserPresentation(context, data)

	local player_local = Game_GetLocalPlayer()
	if data.playerID == player_local or Player_ObserveRelationship(player_local, data.playerID) == R_ALLY then
		-- Team member was destroyed, check if the entire team is eliminated
		
		if Core_IsEntireTeamEliminated(player_local) then
			Conquest_SetupFailStinger()
			
			Conquest_RemoveObjective() -- Only on defeat, otherwise the team could still win
			
			Rule_AddOneShot(_gameOver_message)
			return
		end
	end
	
	-- Was not a Total party kill, however if the loser is the local player - they are eliminated
	if data.playerID == Game_GetLocalPlayer() then	
		Conquest_SetupFailStinger()
		
		Rule_AddOneShot(_gameOver_message)
	end	
end