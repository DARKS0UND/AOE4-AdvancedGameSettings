_custom = {
	setspeed = 1,
	starting_villagers = 6, -- ToDo customizable vill count
	scattered_villagers = 3,
	nomad = {
		timeStarted = 0,
		timeThreshold = 0,
		timeInterval = 0.5,	-- initialized here to prevent script reloading from failing
		duration = 90,		-- time (in seconds) until players accumulate enough resources to build a town center
	},
	treaty = {
		timeStarted = 0,
		timeThreshold = 0, 		--initial threshold check is at start
		timeInterval = 60.0,	-- initialized here to prevent script reloading from failing, once per minute
		duration = 0,		    -- time (in seconds) until players can fight
	},
	sfx_treaty_timer_first = "sfx_ui_victory_countdown_update_first",
	sfx_treaty_timer_final = "sfx_ui_victory_countdown_update_final",
	cueCountdown = {			-- event cue shown at countdown intervals 
		title = Loc_Empty(),
		desc = Loc_Empty(),
		sfx = "sfx_ui_victory_countdown_update_first",
		icon = "icons\\event_queue_high_priority_large",
		template = "high_priority", 
		style = ECV_Queue | ECV_Title,
	},	
}
-----------------------------------------------------------------------
-- Functions
-----------------------------------------------------------------------

function CustomOptions_SetSelectedDiplomacyRuleset(_match)
	if (_match.options.section_diplomacy) then
		_custom.is_tribute_enabled = _match.is_tribute_enabled
		_custom.is_diplomacy_enabled = _match.is_diplomacy_enabled
		Diplomacy_OverrideAllPlayerDiplomacySettings(_match.is_tribute_enabled, _match.is_diplomacy_enabled)
	end
end

-- Requires SetSelected to be used at least once before being used.
function CustomOptions_SetCustomDiplomacyRuleset(is_tribute_enabled, is_diplomacy_enabled)
	Diplomacy_OverrideAllPlayerDiplomacySettings(is_tribute_enabled, is_diplomacy_enabled)
end

function InternalCustomOptions_ShowTimer(minutes_remaining)
	local cue = _custom.cueCountdown
	local uiColour = Player_GetUIColour(Game_GetLocalPlayer())
	cue.title = Loc_FormatText("$64c5019a145c4e4da448dbd3adeea61e:155", minutes_remaining)			
	cue.sfx = _custom.sfx_treaty_timer_first
	Rule_AddOneShot(Treaty_CreateEventCue, 0, { title = cue.title, queue_icon = "", sfx = cue.sfx, uiColour = uiColour, highPriority =  false})	
end
function InternalCustomOptions_EndTimer()
	local cue = _custom.cueCountdown
	local uiColour = Player_GetUIColour(Game_GetLocalPlayer())
	cue.title = Loc_FormatText("$64c5019a145c4e4da448dbd3adeea61e:154")			
	cue.sfx = _custom.sfx_treaty_timer_final
	Rule_AddOneShot(Treaty_CreateEventCue, 0, { title = cue.title, queue_icon = "", sfx = cue.sfx, uiColour = uiColour, highPriority =  true})	
end
-- Event cue function to support delayed events
function Treaty_CreateEventCue(context, data)
	
	-- If event should play in event queue and center screen notification (note: uses high priority icons by default)
	if data.highPriority then
		
		UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, data.title, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority", data.sfx, data.uiColour.r, data.uiColour.g, data.uiColour.b, data.uiColour.a, ECV_Queue, nothing)
		UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, data.title, Loc_Empty(), "event_with_player_color", "icons\\event_queue_high_priority_large", "", data.uiColour.r, data.uiColour.g, data.uiColour.b, data.uiColour.a, ECV_Title, nothing)
	
	-- If event should only play in event queue (note: uses either high priority icon or if not path is specified, the objective arrow icon)
	else
		
		UI_CreateEventCueClickable(-1, 10.0, 0, 20.0, data.title, Loc_Empty(), "event_with_player_color", data.queue_icon, data.sfx, data.uiColour.r, data.uiColour.g, data.uiColour.b, data.uiColour.a, ECV_Queue, nothing)
		
	end	
end

-- Start treaty if its possible based on game option, otherwise does nothing
function CustomOptions_TrySetTreaty(_match)
	local treaty_time = -1
	if _match.options.section_diplomacy and 
		_match.options.section_diplomacy.option_diplomacy_treaty then
		if
			_match.options.section_diplomacy.option_diplomacy_treaty.enum_value == _match.options.section_diplomacy.option_diplomacy_treaty.enum_items.treaty_no then
			treaty_time = 0
		elseif
			_match.options.section_diplomacy.option_diplomacy_treaty.enum_value == _match.options.section_diplomacy.option_diplomacy_treaty.enum_items.treaty_5 then
			treaty_time = 5
		elseif
			_match.options.section_diplomacy.option_diplomacy_treaty.enum_value == _match.options.section_diplomacy.option_diplomacy_treaty.enum_items.treaty_10 then
			treaty_time = 10
		elseif
			_match.options.section_diplomacy.option_diplomacy_treaty.enum_value == _match.options.section_diplomacy.option_diplomacy_treaty.enum_items.treaty_20 then
			treaty_time = 20
		elseif
			_match.options.section_diplomacy.option_diplomacy_treaty.enum_value == _match.options.section_diplomacy.option_diplomacy_treaty.enum_items.treaty_30 then
			treaty_time = 30
		elseif
			_match.options.section_diplomacy.option_diplomacy_treaty.enum_value == _match.options.section_diplomacy.option_diplomacy_treaty.enum_items.treaty_45 then
			treaty_time = 45
		elseif
			_match.options.section_diplomacy.option_diplomacy_treaty.enum_value == _match.options.section_diplomacy.option_diplomacy_treaty.enum_items.treaty_60 then
			treaty_time = 60
		end
	end

	if treaty_time > 0 then
		InternalCustomOptions_CreateTreaty(_match, treaty_time) 
	end
end

function InternalCustomOptions_CreateTreaty(_match, treaty_duration)
	-- time tracking data
	_custom.treaty.timeStarted = World_GetGameTime()
	_custom.treaty.timeThreshold = 60.0
	_custom.treaty.timeInterval = 60.0
	_custom.treaty.duration = treaty_duration * 60.0 --minutes to seconds
	
	-- Disables fighting
	
	Diplomacy_AllPlayer_SaveAndChangeToFriends()
	InternalCustomOptions_ShowTimer(treaty_duration)
	-- no swaping allowed during treaty
	CustomOptions_SetCustomDiplomacyRuleset(_custom.is_tribute_enabled, false)
	Religious_CanTick(false)
	Wonder_CanTick(false)
	Wonder_IsSoloVictory(true)
	Regicide_IsTreaty(true)
	TeamSolidarity_IsTreaty(true)
	-- start countdown
	Rule_Add(InternalCustomOptions_TreatyStart_IncrementCounter)
end

-- Rule that incrementally returns initial resources to players over time.
function InternalCustomOptions_TreatyStart_IncrementCounter()	
	local world_time = World_GetGameTime()
	-- if enough time passed end all treaties
	if world_time - _custom.treaty.timeStarted >= _custom.treaty.duration then
		InternalCustomOptions_TreatyStart_End()
	-- everytime threshold is reached we will inform players that one minute passed, in all cases other than final minute passed as that is moment of start
	elseif world_time - _custom.treaty.timeStarted >= _custom.treaty.timeThreshold then 
		local minutes_remaining = math.floor((_custom.treaty.duration - (world_time - _custom.treaty.timeStarted)) / 60)
		InternalCustomOptions_ShowTimer(minutes_remaining)
		-- define next threshold
		_custom.treaty.timeThreshold = _custom.treaty.timeThreshold + _custom.treaty.timeInterval		
	end	
end


-- Ends treaty start's incremental time accumulation. Enables fighting
function InternalCustomOptions_TreatyStart_End()
	if Rule_Exists(InternalCustomOptions_TreatyStart_IncrementCounter) then		
		Rule_Remove(InternalCustomOptions_TreatyStart_IncrementCounter)								
		Diplomacy_AllPlayer_LoadFromSave()
		InternalCustomOptions_EndTimer()
	-- no swaping allowed during treaty
		CustomOptions_SetCustomDiplomacyRuleset(_custom.is_tribute_enabled, _custom.is_diplomacy_enabled)
		Religious_CanTick(true)
		Wonder_IsSoloVictory(false)
		Wonder_CanTick(true)
		Regicide_IsTreaty(false)
		TeamSolidarity_IsTreaty(false)
	end
end




	
function CustomOptions_SetFOW(_match)
	if (_match.options.section_starting_conditions and _match.options.section_starting_conditions.option_fow) then
		if (_match.options.section_starting_conditions.option_fow.enum_value == _match.options.section_starting_conditions.option_fow.enum_items.option_fow_explore) then 
			FOW_ExploreAll()
		elseif (_match.options.section_starting_conditions.option_fow.enum_value == _match.options.section_starting_conditions.option_fow.enum_items.option_fow_reveal) then
			FOW_ForceRevealAllUnblockedAreas()
		end
	end
end
	
function CustomOptions_EnableScore(_match)
	if (_match.options.section_starting_conditions and _match.options.section_starting_conditions.option_score) then
		for _, player in pairs(PLAYERS) do
			player.scarModel.show_actual_score = true
			UI_SetPlayerDataContext(player.id, player.scarModel)
		end
	end
end

function CustomOptions_LockAgeUp()
	local last_age = -1
	if _match.options.section_custom_conditions and 
		_match.options.section_custom_conditions.option_max_age then
		
		if _match.options.section_custom_conditions.option_max_age.enum_value == _match.options.section_custom_conditions.option_max_age.enum_items.option_max_age_1 then
			last_age = AGE_DARK
		elseif _match.options.section_custom_conditions.option_max_age.enum_value == _match.options.section_custom_conditions.option_max_age.enum_items.option_max_age_2 then
			last_age = AGE_FEUDAL
		elseif _match.options.section_custom_conditions.option_max_age.enum_value == _match.options.section_custom_conditions.option_max_age.enum_items.option_max_age_3 then
			last_age = AGE_CASTLE
		elseif _match.options.section_custom_conditions.option_max_age.enum_value == _match.options.section_custom_conditions.option_max_age.enum_items.option_max_age_4 then
			last_age = AGE_IMPERIAL
		end		
	end

	if last_age > 0 then
		_match.custom.max_age = last_age
		InternalCustomOptions_LockAgeUp(_match, last_age)
	end
end

function InternalCustomOptions_LockAgeUp(_match, last_age)
	for _, player in pairs(PLAYERS) do
		if Player_GetRaceName(player.id) == "abbasid" then
			InternalCustomOptions_LockAbbasidsAgeUp(player, last_age)
		end
		
		Player_SetMaximumAge(player.id, last_age)
	end
end

function InternalCustomOptions_LockAbbasidsAgeUp(player, last_age)
	if last_age == 1 then
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_culture_wing"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_economy_wing"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_military_wing"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_trade_wing"), ITEM_LOCKED)
	end
	if last_age == 2 then
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_culture_wing_feudal"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_economy_wing_feudal"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_military_wing_feudal"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_trade_wing_feudal"), ITEM_LOCKED)
	end
	if last_age == 3 then
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_culture_wing_castle"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_economy_wing_castle"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_military_wing_castle"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_trade_wing_castle"), ITEM_LOCKED)
	end
	if last_age == 4 then
		--Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_culture_wing_imperial"), ITEM_LOCKED)
		--Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_economy_wing_imperial"), ITEM_LOCKED)
		--Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_military_wing_imperial"), ITEM_LOCKED)
		--Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_trade_wing_imperial"), ITEM_LOCKED)
	end
end

function CustomOptions_SetPopCap(_match)
	local pop_size = -1
	if _match.options.section_custom_conditions and 
		_match.options.section_custom_conditions.option_pop then
		if
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_50 then
			pop_size = 50
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_100 then
			pop_size = 100
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_150 then
			pop_size = 150
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_200 then
			pop_size = 200
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_300 then
			pop_size = 300
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_400 then
			pop_size = 400
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_500 then
			pop_size = 500
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_1000 then
			pop_size = 1000
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_10000 then
			pop_size = 10000
		end
	end

	if pop_size > 0 then
		InternalCustomOptions_SetPopCap(pop_size)
	end
end

function InternalCustomOptions_SetPopCap(pop_size)
	for _, player in pairs(PLAYERS) do
		
		local value =  - (200 - pop_size)
		
		CustomOptions_Player_SetMaxCapPopulation(player, value)
		if Player_GetRaceName(player.id) == "mongol" then
			CustomOptions_Player_SetMaxPopulation(player, value)
		end	
	end
end

function CustomOptions_Player_SetMaxPopulation(player, pop_size)
	Player_SetExactMaxPopulation(player.id, CT_Personnel, pop_size)
	--Player_SetExactMaxPopulation(player.id, CT_Vehicle, pop_size)
end

function CustomOptions_Player_SetMaxCapPopulation(player, pop_size)
	Player_SetExactMaxCapPopulation(player.id, CT_Personnel, pop_size)
	--Player_SetExactMaxCapPopulation(player.id, CT_Vehicle, pop_size)
end


--? @shortdesc Sets the current personnel or vehicle cap for a player. The captype is either CT_Personnel or CT_Vehicle (you can't adjust Medic caps just yet).
--? @extdesc Note that any modifiers that adjust the current cap will be applied on top of this.  Also note, the current cap cannot go higher than the max cap.
--? @args PlayerID playerid, Integer captype, Integer newcap
--? @result Void
function Player_SetExactMaxPopulation(playerid, captype, value)
	
	if scartype(playerid) ~= ST_PLAYER then fatal("Player_SetMaxPopulation: Invalid PlayerID") end
	local index = World_GetPlayerIndex(playerid)
	
	if (captype == CT_Vehicle) then
		
		if( _player_vehicle_cap == nil ) then	
			_player_vehicle_cap = {}
		else
			Modifier_Remove( _player_vehicle_cap[index] )
		end
		local modifier = Modifier_Create(MAT_Player, "vehicle_cap_player_modifier", MUT_Addition, false, value, "")
		_player_vehicle_cap[index] = Modifier_ApplyToPlayer( modifier, playerid, 0 )
		
	elseif (captype == CT_Personnel) then
		
		if( _player_personnel_cap == nil ) then	
			_player_personnel_cap = {}
		else
			Modifier_Remove( _player_personnel_cap[index] )
		end
		local modifier = Modifier_Create(MAT_Player, "personnel_cap_player_modifier", MUT_Addition, false, value, "")
		_player_personnel_cap[index] = Modifier_ApplyToPlayer( modifier, playerid, 0 )
		
	else
		
		fatal("Player_SetMaxPopulation: Invalid cap type")
		
	end
	
end


--? @shortdesc Sets the current personnel or vehicle max-cap for a player. The captype is either CT_Personnel or CT_Vehicle (you can't adjust Medic caps just yet).
--? @extdesc Note that any modifiers that adjust the current max cap will be applied on top of this.  Also note, this is only adjusting the max cap, not the current cap,
--? @extdesc you will have to call Player_SetMaxPopulation to adjust the current max population to do this.
--? @args PlayerID playerid, Integer captype, Integer newcap
--? @result Void
function Player_SetExactMaxCapPopulation(playerid, captype, value)

	if scartype(playerid) ~= ST_PLAYER then fatal("Player_SetMaxPopulation: Invalid PlayerID") end
	local index = World_GetPlayerIndex(playerid)
	
	if (captype == CT_Vehicle) then
		
		if( _player_vehicle_max_cap == nil ) then	
			_player_vehicle_max_cap = {}
		else
			Modifier_Remove( _player_vehicle_max_cap[index] )
		end
		local modifier = Modifier_Create(MAT_Player, "max_vehicle_cap_player_modifier", MUT_Addition, false, value, "")
		_player_vehicle_max_cap[index] = Modifier_ApplyToPlayer( modifier, playerid, 0 )
		
	elseif (captype == CT_Personnel) then
		
		if( _player_personnel_max_cap == nil ) then	
			_player_personnel_max_cap = {}
		else
			Modifier_Remove( _player_personnel_max_cap[index])
		end
		local modifier = Modifier_Create(MAT_Player, "max_personnel_cap_player_modifier", MUT_Addition, false, value, "")
		_player_personnel_max_cap[index] = Modifier_ApplyToPlayer( modifier, playerid, 0 )
		
	else
		
		fatal("Player_SetMaxCapPopulation: Invalid cap type")
		
	end
	
end



function CustomOptions_AddGameSpeedRule()
	Rule_AddGlobalEvent(CustomOptions_GameSpeedRule, GE_ConstructionComplete)
end

function CustomOptions_RemoveGameSpeedRule()
	Rule_RemoveGlobalEvent(CustomOptions_GameSpeedRule)
end

-- Global event callback for GE_ConstructionComplete
function CustomOptions_GameSpeedRule(context)	

	local player = Core_GetPlayersTableEntry(context.player)
	local entity = context.entity
		
	Modifier_ApplyToEntity(Modifier_Create(MAT_Entity, "production_speed_modifier", MUT_Multiplication, false, _custom.setspeed, nil), entity, 0.0)
	Modifier_ApplyToEntity(Modifier_Create(MAT_Entity, "cost_ticks_modifier", MUT_Multiplication, false, 1/_custom.setspeed, nil), entity, 0.0)

end

function CustomOptions_SetGameSpeed(_match)
	local speed = -1
	if _match.options.section_custom_conditions and 
		_match.options.section_custom_conditions.option_speed then
		if _match.options.section_custom_conditions and 
			_match.options.section_custom_conditions.option_speed and 
			_match.options.section_custom_conditions.option_speed.enum_value == _match.options.section_custom_conditions.option_speed.enum_items.option_speed_025x then
			speed = 0.25
		elseif _match.options.section_custom_conditions and 
			_match.options.section_custom_conditions.option_speed and 
			_match.options.section_custom_conditions.option_speed.enum_value == _match.options.section_custom_conditions.option_speed.enum_items.option_speed_050x then
			speed = 0.50	
		elseif _match.options.section_custom_conditions and 
			_match.options.section_custom_conditions.option_speed and 
			_match.options.section_custom_conditions.option_speed.enum_value == _match.options.section_custom_conditions.option_speed.enum_items.option_speed_075x then
			speed = 0.75	
		elseif _match.options.section_custom_conditions and 
			_match.options.section_custom_conditions.option_speed and 
			_match.options.section_custom_conditions.option_speed.enum_value == _match.options.section_custom_conditions.option_speed.enum_items.option_speed_1x then
			speed = 1.00	
		elseif _match.options.section_custom_conditions and 
			_match.options.section_custom_conditions.option_speed and 
			_match.options.section_custom_conditions.option_speed.enum_value == _match.options.section_custom_conditions.option_speed.enum_items.option_speed_2x then
			speed = 2.00
		elseif _match.options.section_custom_conditions and 
			_match.options.section_custom_conditions.option_speed and 
			_match.options.section_custom_conditions.option_speed.enum_value == _match.options.section_custom_conditions.option_speed.enum_items.option_speed_3x then
			speed = 3.00	
		elseif _match.options.section_custom_conditions and 
			_match.options.section_custom_conditions.option_speed and 
			_match.options.section_custom_conditions.option_speed.enum_value == _match.options.section_custom_conditions.option_speed.enum_items.option_speed_5x then
			speed = 5.00	
		elseif _match.options.section_custom_conditions and 
			_match.options.section_custom_conditions.option_speed and 
			_match.options.section_custom_conditions.option_speed.enum_value == _match.options.section_custom_conditions.option_speed.enum_items.option_speed_10x then
			speed = 10.00
		elseif _match.options.section_custom_conditions and 
			_match.options.section_custom_conditions.option_speed and 
			_match.options.section_custom_conditions.option_speed.enum_value == _match.options.section_custom_conditions.option_speed.enum_items.option_speed_100x then
			speed = 100.00
		end
	end
	
	if speed > 0 and speed ~= 1.00 then
		InternalCustomOptions_SetGameSpeed(_match, speed)
	end
end

-- Modifies the default gathering, construction, production, and upgrade speeds for all units and players.

function InternalCustomOptions_SetGameSpeed(_match, speed)
	
	-- Removed existing speed modifiers
	for _, modifier in pairs(_match.speed.modifiers) do
		Modifier_RemoveInternal(modifier.ModifierID)
	end
	_match.speed.modifiers = {}
	_custom.setspeed = speed
	_match.speed.build = speed
	_match.speed.repair = speed
	_match.speed.gather = speed
	_match.speed.upgrade = speed
	_match.speed.production = speed
	
	local ApplyModifier = function(player_id, modifier_ebp, modifier_type, modifier_value)
		if modifier_value ~= 1 then 
			local modifier = Modifier_Create(MAT_EntityType, modifier_type, MUT_Multiplication, false, modifier_value, modifier_ebp)
			Modifier_ApplyToPlayer(modifier, player_id, 0.0)
			table.insert(_match.speed.modifiers, modifier)
		end
	end
	
	-- Apply new modifiers
	for _, player in pairs(PLAYERS) do	
		local villager_ebp = Cardinal_ConvertTypeToEntityBlueprint("villager", player.id)		
		ApplyModifier(player.id, villager_ebp, "resource_entity_harvest_rate_food", _match.speed.gather)
		ApplyModifier(player.id, villager_ebp, "resource_entity_harvest_rate_wood", _match.speed.gather)
		ApplyModifier(player.id, villager_ebp, "resource_entity_harvest_rate_gold", _match.speed.gather)
		ApplyModifier(player.id, villager_ebp, "resource_entity_harvest_rate_stone", _match.speed.gather)
		ApplyModifier(player.id, villager_ebp, "construction_rate", _match.speed.build)
--		ApplyModifier(player.id, villager_ebp, "repair_rate_modifier", _match.speed.repair)
	end
end


function CustomOptions_RemoveGaia(_match)
	if _match.options.custom and
		_match.options.section_custom_conditions.nogaia then
		local egroup = EGroup_CreateUnique()
		World_GetAllNeutralEntities(egroup)
		EGroup_Filter(egroup, "animal", FILTER_KEEP)
		EGroup_DestroyAllEntities(egroup)    		
		EGroup_Destroy(egroup)
	end
end

function CustomOptions_RemoveUnits(_match)
	if _match.options.custom and
		_match.options.section_custom_conditions.nounits then
		SGroup_DestroyAllSquads(Player_GetSquads(player.id))
	end
end

function CustomOptions_Cheats(_match)
	_match.is_cheat_enabled = Misc_IsCommandLineOptionSet("cheat")
	_match.revealMap = Misc_IsCommandLineOptionSet("no_fow")
end





-- This function spawns a castle next to each player's Town Center
function CustomOptions_SpawnKeeps()
	for i, player in pairs(PLAYERS) do
		local player_civ = Player_GetRaceName(player.id)
		
		local ebp_building = InternalCustomOptions_GetKeep(player_civ)
		
		local keep = InternalCustomOptions_SpawnEntityAtSpawnOffset(player.id, ebp_building, 15, 0, 0)
		-- mod keep has special ID for fast garrison		
		local egKeep = EGroup_CreateIfNotFound("keep_" .. tostring(player)) 
		EGroup_Add(egKeep, keep)
	end
end

-- This function spawns a king next each player's Town Center
function CustomOptions_SpawnKings()
	for i, player in pairs(PLAYERS) do
		local player_civ = Player_GetRaceName(player.id)
		
		local sbp_king = InternalCustomOptions_GetKing(player_civ)
		
		InternalCustomOptions_SpawnUnitAtSpawnOffset(player.id, sbp_king, -13, 0, -13, "king", 1)
	end
end

function CustomOptions_RunKing()
	for i, player in pairs(PLAYERS) do 
		local sqKing = Player_GetSquadsFromType(player.id, "king")
		if SGroup_Count(sqKing) == 1 then
			if (EGroup_Exists("keep_" .. tostring(player))) then
				local ekeep = EGroup_FromName("keep_" .. tostring(player))
				Cmd_Garrison(sqKing, ekeep, false, false, true)			
			elseif EGroup_Count(Player_GetEntitiesFromType(player.id, "town_center")) ~= 0 then
				local etc = Player_GetEntitiesFromType(player.id, "town_center")
				Cmd_Garrison(sqKing, etc, false, false, true)			
			else
				local move_position = Util_GetOffsetPosition(player.startingPos, 20, 15)
				Cmd_Ability(sqKing, BP_GetAbilityBlueprint("core_formation_line"))
				Cmd_FormationMove(sqKing, move_position, false)				
			end
		end		
	end
end

-- ox,oy,oz must be multiples of 5
function InternalCustomOptions_SpawnEntityAtSpawnOffset(player, entity_bp, ox, oy, oz)
	--local player = World_GetPlayerAt(1)
	local ps = Player_GetStartingPosition(player)
	-- proper rotation
	local nx = 5 * math.floor(math.floor(ps.x) / 5)
	local ny = 5 * math.floor(math.floor(ps.y) / 5)
	local nz = 5 * math.floor(math.floor(ps.z) / 5)
	local psx = World_Pos(nx + ox, ny + oy, nz + oz)
	local pst = World_Pos(nx + ox, ny + oy, nz + oz + 5)
	-- finally spawn it
	local e = Entity_CreateFacing(entity_bp, player, psx, pst, true)
	Entity_Spawn(e)
	Entity_ForceConstruct(e)
	Entity_SnapToGridAndGround(e, false)
	return e	
end

function InternalCustomOptions_SpawnUnitAtSpawnOffset(player, unit_bp, ox, oy, oz, category, count)
	--local player = World_GetPlayerAt(1)
	local ps = Player_GetStartingPosition(player)
	-- proper rotation
	local nx = 5 * math.floor(math.floor(ps.x) / 5)
	local ny = 5 * math.floor(math.floor(ps.y) / 5)
	local nz = 5 * math.floor(math.floor(ps.z) / 5)
	local psx = World_Pos(nx + ox, ny + oy, nz + oz)
	-- finally spawn it	
	--local sgroup_name = "sg_player_" .. category .. "_" .. tostring(player)
	local sgroup_name = category
	local sg_units = SGroup_CreateIfNotFound(sgroup_name)
	UnitEntry_DeploySquads(player, sg_units, {{sbp = unit_bp, numSquads = count }}, psx)
	return sg_units
end

function CustomOptions_ApplyStartingAgeUpgrades(_match)
	local optionAgeStartKey
	if _match.section_starting_conditions 
		and _match.section_starting_conditions.option_start_age 
		and _match.section_starting_conditions.option_start_age.enum_items then 
		for key, value in pairs(_match.section_starting_conditions.option_start_age.enum_items) do
			if (_match.section_starting_conditions.option_start_age.enum_value == value) then
				optionAgeStartKey = key
			end
		end
	end
	
	local initialUpgrades = {} 
	for i, age in pairs(_match.ages) do
		if age.option == optionAgeStartKey then 
			initialUpgrades = age.initialUpgrades
			break
		end
	end
	
	for i, player in pairs(PLAYERS) do	
		-- Initial upgrades (add in reverse chronological order so audio cues don't overlap)
		for j = #initialUpgrades, 1, -1 do
			if not Player_HasUpgrade(player.id, initialUpgrades[j]) then
				Player_CompleteUpgrade(player.id, initialUpgrades[j])				
			end
		end 
	end
end

-- Alter game simulation speed, e.g. make everything faster/slower, this should also break all timers to be slower or faster
function CustomOptions_SetSimulationSpeed(_match)
	local sim_speed_multi = -1
	if _match.options.section_custom_conditions and 
		_match.options.section_custom_conditions.option_speed_rate then
		if
			_match.options.section_custom_conditions.option_speed_rate.enum_value == _match.options.section_custom_conditions.option_speed_rate.enum_items.option_speed_rate_percentage_50 then
			sim_speed_multi = 0.50
		elseif
			_match.options.section_custom_conditions.option_speed_rate.enum_value == _match.options.section_custom_conditions.option_speed_rate.enum_items.option_speed_rate_percentage_75 then
			sim_speed_multi = 0.75
		elseif
			_match.options.section_custom_conditions.option_speed_rate.enum_value == _match.options.section_custom_conditions.option_speed_rate.enum_items.option_speed_rate_percentage_90 then
			sim_speed_multi = 0.90
		elseif
			_match.options.section_custom_conditions.option_speed_rate.enum_value == _match.options.section_custom_conditions.option_speed_rate.enum_items.option_speed_rate_percentage_100 then
			sim_speed_multi = 1.00
		elseif
			_match.options.section_custom_conditions.option_speed_rate.enum_value == _match.options.section_custom_conditions.option_speed_rate.enum_items.option_speed_rate_percentage_110 then
			sim_speed_multi = 1.10
		elseif
			_match.options.section_custom_conditions.option_speed_rate.enum_value == _match.options.section_custom_conditions.option_speed_rate.enum_items.option_speed_rate_percentage_125 then
			sim_speed_multi = 1.25
		elseif
			_match.options.section_custom_conditions.option_speed_rate.enum_value == _match.options.section_custom_conditions.option_speed_rate.enum_items.option_speed_rate_percentage_150 then
			sim_speed_multi = 1.50
		elseif
			_match.options.section_custom_conditions.option_speed_rate.enum_value == _match.options.section_custom_conditions.option_speed_rate.enum_items.option_speed_rate_percentage_200 then
			sim_speed_multi = 2.00
		elseif
			_match.options.section_custom_conditions.option_speed_rate.enum_value == _match.options.section_custom_conditions.option_speed_rate.enum_items.option_speed_rate_percentage_300 then
			sim_speed_multi = 3.00
		end
	end

	if sim_speed_multi > 0 and sim_speed_multi ~= 1.0 then
		local old_rate = Game_GetSimRate()
		local new_rate = old_rate * sim_speed_multi
		Game_SetSimRate(new_rate)
	end
end


-- might be revisited later as this is only here as joke option.
function Ding_Start()
	if 	_match.options.section_custom_conditions_2.can_ding then
		--figure out how to get real selection event, e.g. definitely not GE_SubselectionChanged, GE_EntitySelectionVisualChanged, GE_SelectionChanged
		Ding_Queue()
	end	
end

function Ding_Queue()
	-- Each frame check
	Rule_AddInterval(Ding_Execute, 1)
end

function Ding_Execute()	
	
	local egroup = Player_GetEntitiesFromType(Game_GetLocalPlayer(), _match.types.townCenter)
	local sgroup_vil = Player_GetSquadsFromType(Game_GetLocalPlayer(), "villager")
	if Misc_IsEGroupSelected(egroup, false) then
		-- Remove to not create overflow of DINGS
		Rule_Remove(Ding_Execute)	
		Util_StartQuickIntel(ACTOR.NARR, "DING DING DING DING DING DING DING DING DING DING")
		-- Do next in 15 secs, 
		Rule_AddOneShot(Ding_Queue, 15)
	elseif Misc_IsSGroupSelected(sgroup_vil, false) then
		-- Remove to not create overflow of SAYS
		Rule_Remove(Ding_Execute)	
		Util_StartQuickIntel(ACTOR.NARR,"Yes, milord? What is it? More work? What?")
		-- Do next in 15 secs, 
		Rule_AddOneShot(Ding_Queue, 15)
	end
end

function Ding_DeQueue()
	if Rule_Exists(Ding_Execute) then
		Rule_Remove(Ding_Execute)
	end
	if Rule_Exists(Ding_Queue) then
		Rule_Remove(Ding_Queue)
	end
end
