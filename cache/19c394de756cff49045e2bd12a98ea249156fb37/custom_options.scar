-----------------------------------------------------------------------
-- Functions
-----------------------------------------------------------------------

	
function CustomOptions_SetFOW(_match)
	if (_match.options.section_starting_conditions and _match.options.section_starting_conditions.option_fow) then
		if (_match.options.section_starting_conditions.option_fow.enum_value == _match.options.section_starting_conditions.option_fow.enum_items.option_fow_explore) then 
			FOW_ExploreAll()
		elseif (_match.options.section_starting_conditions.option_fow.enum_value == _match.options.section_starting_conditions.option_fow.enum_items.option_fow_reveal) then
			FOW_ForceRevealAllUnblockedAreas()
		end
	end
end
	
function CustomOptions_EnableScore(_match)
	if (_match.options.section_starting_conditions and _match.options.section_starting_conditions.option_score) then
		for _, player in pairs(PLAYERS) do
			player.scarModel.show_actual_score = true
			UI_SetPlayerDataContext(player.id, player.scarModel)
		end
	end
end

function CustomOptions_LockAgeUp()
	local last_age = -1
	if _match.options.section_custom_conditions and 
		_match.options.section_custom_conditions.option_max_age then
		
		if _match.options.section_custom_conditions.option_max_age.enum_value == _match.options.section_custom_conditions.option_max_age.enum_items.option_max_age_1 then
			last_age = AGE_DARK
		elseif _match.options.section_custom_conditions.option_max_age.enum_value == _match.options.section_custom_conditions.option_max_age.enum_items.option_max_age_2 then
			last_age = AGE_FEUDAL
		elseif _match.options.section_custom_conditions.option_max_age.enum_value == _match.options.section_custom_conditions.option_max_age.enum_items.option_max_age_3 then
			last_age = AGE_CASTLE
		elseif _match.options.section_custom_conditions.option_max_age.enum_value == _match.options.section_custom_conditions.option_max_age.enum_items.option_max_age_4 then
			last_age = AGE_IMPERIAL
		end		
	end

	if last_age > 0 then
		_match.custom.max_age = last_age
		InternalCustomOptions_LockAgeUp(_match, last_age)
	end
end

function InternalCustomOptions_LockAgeUp(_match, last_age)
	for _, player in pairs(PLAYERS) do
		if Player_GetRaceName(player.id) == "abbasid" then
			InternalCustomOptions_LockAbbasidsAgeUp(player, last_age)
		end
		
		Player_SetMaximumAge(player.id, last_age)
	end
end

function InternalCustomOptions_LockAbbasidsAgeUp(player, last_age)
	if last_age == 1 then
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_culture_wing"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_economy_wing"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_military_wing"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_trade_wing"), ITEM_LOCKED)
	end
	if last_age == 2 then
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_culture_wing_feudal"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_economy_wing_feudal"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_military_wing_feudal"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_trade_wing_feudal"), ITEM_LOCKED)
	end
	if last_age == 3 then
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_culture_wing_castle"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_economy_wing_castle"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_military_wing_castle"), ITEM_LOCKED)
		Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_trade_wing_castle"), ITEM_LOCKED)
	end
	if last_age == 4 then
		--Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_culture_wing_imperial"), ITEM_LOCKED)
		--Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_economy_wing_imperial"), ITEM_LOCKED)
		--Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_military_wing_imperial"), ITEM_LOCKED)
		--Player_SetUpgradeAvailability(player.id, BP_GetUpgradeBlueprint("upgrade_add_trade_wing_imperial"), ITEM_LOCKED)
	end
end

function CustomOptions_SetPopCap(_match)
	local pop_size = -1
	if _match.options.section_custom_conditions and 
		_match.options.section_custom_conditions.option_pop then
		if
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_50 then
			pop_size = 50
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_100 then
			pop_size = 100
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_150 then
			pop_size = 150
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_200 then
			pop_size = 200
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_300 then
			pop_size = 300
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_400 then
			pop_size = 400
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_500 then
			pop_size = 500
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_1000 then
			pop_size = 1000
		elseif
			_match.options.section_custom_conditions.option_pop.enum_value == _match.options.section_custom_conditions.option_pop.enum_items.option_pop_10000 then
			pop_size = 10000
		end
	end

	if pop_size > 0 then
		InternalCustomOptions_SetPopCap(_match, pop_size)
	end
end

function InternalCustomOptions_SetPopCap(_match, pop_size)
	for _, player in pairs(PLAYERS) do
		if Player_GetRaceName(player.id) == "mongol" then
			Player_SetMaxPopulation(player.id, CT_Personnel, pop_size)
			Player_SetMaxPopulation(player.id, CT_Vehicle, pop_size)
		end	
		Player_SetMaxCapPopulation(player.id, CT_Personnel, pop_size)
		Player_SetMaxCapPopulation(player.id, CT_Vehicle, pop_size)
	end
end

function CustomOptions_AddGameSpeedRule()
	Rule_AddGlobalEvent(CustomOptions_GameSpeedRule, GE_ConstructionComplete)
end

function CustomOptions_RemoveGameSpeedRule()
	Rule_RemoveGlobalEvent(CustomOptions_GameSpeedRule)
end

-- Global event callback for GE_ConstructionComplete
function CustomOptions_GameSpeedRule(context)	

	local player = Core_GetPlayersTableEntry(context.player)
	local entity = context.entity
		
	Modifier_ApplyToEntity(Modifier_Create(MAT_Entity, "production_speed_modifier", MUT_Multiplication, false, _match.speed.setspeed, nil), entity, 0.0)
	Modifier_ApplyToEntity(Modifier_Create(MAT_Entity, "cost_ticks_modifier", MUT_Multiplication, false, 1/_match.speed.setspeed, nil), entity, 0.0)

end

function CustomOptions_SetGameSpeed(_match)
	local speed = -1
	if _match.options.section_custom_conditions and 
		_match.options.section_custom_conditions.option_speed then
		if _match.options.section_custom_conditions and 
			_match.options.section_custom_conditions.option_speed and 
			_match.options.section_custom_conditions.option_speed.enum_value == _match.options.section_custom_conditions.option_speed.enum_items.option_speed_1x then
			speed = 1
		elseif _match.options.section_custom_conditions and 
			_match.options.section_custom_conditions.option_speed and 
			_match.options.section_custom_conditions.option_speed.enum_value == _match.options.section_custom_conditions.option_speed.enum_items.option_speed_2x then
			speed = 2	
		elseif _match.options.section_custom_conditions and 
			_match.options.section_custom_conditions.option_speed and 
			_match.options.section_custom_conditions.option_speed.enum_value == _match.options.section_custom_conditions.option_speed.enum_items.option_speed_3x then
			speed = 3	
		elseif _match.options.section_custom_conditions and 
			_match.options.section_custom_conditions.option_speed and 
			_match.options.section_custom_conditions.option_speed.enum_value == _match.options.section_custom_conditions.option_speed.enum_items.option_speed_5x then
			speed = 5	
		elseif _match.options.section_custom_conditions and 
			_match.options.section_custom_conditions.option_speed and 
			_match.options.section_custom_conditions.option_speed.enum_value == _match.options.section_custom_conditions.option_speed.enum_items.option_speed_10x then
			speed = 10
		end
	end
	
	if speed > 0 then
		InternalCustomOptions_SetGameSpeed(_match, speed)
	end
end

-- Modifies the default gathering, construction, production, and upgrade speeds for all units and players.

function InternalCustomOptions_SetGameSpeed(_match, speed)
	
	-- Removed existing speed modifiers
	for _, modifier in pairs(_match.speed.modifiers) do
		Modifier_RemoveInternal(modifier.ModifierID)
	end
	_match.speed.modifiers = {}
	_match.speed.setspeed = speed
	_match.speed.build = speed
	_match.speed.repair = speed
	_match.speed.gather = speed
	_match.speed.upgrade = speed
	_match.speed.production = speed
	
	local ApplyModifier = function(player_id, modifier_ebp, modifier_type, modifier_value)
		if modifier_value ~= 1 then 
			local modifier = Modifier_Create(MAT_EntityType, modifier_type, MUT_Multiplication, false, modifier_value, modifier_ebp)
			Modifier_ApplyToPlayer(modifier, player_id, 0.0)
			table.insert(_match.speed.modifiers, modifier)
		end
	end
	
	-- Apply new modifiers
	for _, player in pairs(PLAYERS) do	
		local villager_ebp = Cardinal_ConvertTypeToEntityBlueprint("villager", player.id)		
		ApplyModifier(player.id, villager_ebp, "resource_entity_harvest_rate_food", _match.speed.gather)
		ApplyModifier(player.id, villager_ebp, "resource_entity_harvest_rate_wood", _match.speed.gather)
		ApplyModifier(player.id, villager_ebp, "resource_entity_harvest_rate_gold", _match.speed.gather)
		ApplyModifier(player.id, villager_ebp, "resource_entity_harvest_rate_stone", _match.speed.gather)
		ApplyModifier(player.id, villager_ebp, "construction_rate", _match.speed.build)
--		ApplyModifier(player.id, villager_ebp, "repair_rate_modifier", _match.speed.repair)
	end
end


function CustomOptions_RemoveGaia(_match)
	if _match.options.custom and
		_match.options.section_custom_conditions.nogaia then
		local egroup = EGroup_CreateUnique()
		World_GetAllNeutralEntities(egroup)
		EGroup_Filter(egroup, "animal", FILTER_KEEP)
		EGroup_DestroyAllEntities(egroup)    		
		EGroup_Destroy(egroup)
	end
end

function CustomOptions_RemoveUnits(_match)
	if _match.options.custom and
		_match.options.section_custom_conditions.nounits then
		SGroup_DestroyAllSquads(Player_GetSquads(player.id))
	end
end

function CustomOptions_Cheats(_match)
	_match.is_cheat_enabled = Misc_IsCommandLineOptionSet("cheat")
	_match.revealMap = Misc_IsCommandLineOptionSet("no_fow")
end





-- This function spawns a castle next to each player's Town Center
function CustomOptions_SpawnKeeps()
	for i, player in pairs(PLAYERS) do
		local player_civ = Player_GetRaceName(player.id)
		
		local ebp_building
		
		if player_civ == "english" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_eng")			
		elseif player_civ == "chinese" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_chi")			
		elseif player_civ == "french" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_fre")			
		elseif player_civ == "hre" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_hre")			
		elseif player_civ == "mongol" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_control_nov")			
		elseif player_civ == "rus" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_control_rus")			
		elseif player_civ == "sultanate" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_control_sul")			
		elseif player_civ == "abbasid" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_control_abb")			
		end
		
		local spawn_position = Util_GetOffsetPosition(player.startingPos, 10, 20)
		local entity = Entity_Create(ebp_building, player.id, spawn_position, false)
		Entity_Spawn(entity)
		Entity_ForceConstruct(entity)
		Entity_SnapToGridAndGround(entity, false)	
	end
end

-- This function spawns a king next each player's Town Center
function CustomOptions_SpawnKings()
	for i, player in pairs(PLAYERS) do
		local player_civ = Player_GetRaceName(player.id)
		
		local sbp_king
		if player_civ == "english" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_eng")
		elseif player_civ == "chinese" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_chi")
		elseif player_civ == "french" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_fre")
		elseif player_civ == "hre" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_hre")
		elseif player_civ == "mongol" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_mon")
		elseif player_civ == "rus" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_rus")
		elseif player_civ == "sultanate" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_sul")
		elseif player_civ == "abbasid" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_abb")
			
		end
		
		local spawn_position = Util_GetOffsetPosition(player.startingPos, 20, 10)
		local sgroup_name = "sg_player_king_" .. tostring(player.id)
		local sg_player_king = SGroup_CreateIfNotFound(sgroup_name)
		UnitEntry_DeploySquads(player.id, sg_player_king, {{sbp = sbp_king, numSquads = 1 }}, spawn_position)
		local move_position = Util_GetOffsetPosition(player.startingPos, 20, 15)
		Cmd_Ability(sg_player_king, BP_GetAbilityBlueprint("core_formation_line"))
		Cmd_FormationMove(sg_player_king, move_position, false)
		
	end
end

function CustomOptions_SpawnInitialSquads()
	for i, player in pairs(PLAYERS) do
		local player_civ = Player_GetRaceName(player.id)
		
		local vil = InternalCustomOptions_GetVillager(player_civ)
		InternalCustomOptions_SpawnUnitAtStartPosition(player, vil, "villager", 1, -2, -4)
		InternalCustomOptions_SpawnUnitAtStartPosition(player, vil, "villager", 1, -2, 2)
		InternalCustomOptions_SpawnUnitAtStartPosition(player, vil, "villager", 1, -3, 3)
		InternalCustomOptions_SpawnUnitAtStartPosition(player, vil, "villager", 1, -1, -2)
		InternalCustomOptions_SpawnUnitAtStartPosition(player, vil, "villager", 1, -1, 6)
		InternalCustomOptions_SpawnUnitAtStartPosition(player, vil, "villager", 1, 0, -4)
		
		local sco = InternalCustomOptions_GetScout(player_civ)
		InternalCustomOptions_SpawnUnitAtStartPosition(player, sco, "scout", 1, -4, 5)
		
		local shp = InternalCustomOptions_GetSheep(player_civ)
		InternalCustomOptions_SpawnUnitAtStartPosition(player, shp, "sheep", 1, 0, 1.5)

		if player_civ == "mongol" then
			local tco = InternalCustomOptions_GetOther(player_civ)
			InternalCustomOptions_SpawnBuildingAtStartPosition(player, tco, "town_center", 1, 1)
		end
	end
	-- ToDo
	-- currently set in .rdo	
end

function InternalCustomOptions_SpawnBuildingAtStartPosition(player, ebp_buildingbp, category, x, y)
	local spawn_position = Util_GetOffsetPosition(player.startingPos, x, y)
	local entity = Entity_Create(ebp_buildingbp, player.id, spawn_position, false)
	Entity_Spawn(entity)
	Entity_ForceConstruct(entity)
	Entity_SnapToGridAndGround(entity, false)
	EGroup_Add(Player_GetEntitiesFromType(player.id, category), entity)	
end

function InternalCustomOptions_SpawnUnitAtStartPosition(player, sbp_unitbp, category, count, x ,y)
	local spawn_position = Util_GetOffsetPosition(player.startingPos, x, y)
	local sgroup_name = "sg_player_" .. category .. "_" .. tostring(player.id)
	local sg_units = SGroup_CreateIfNotFound(sgroup_name)
	UnitEntry_DeploySquads(player.id, sg_units, {{sbp = sbp_unitbp, numSquads = count }}, spawn_position)
	--local move_position = Util_GetOffsetPosition(player.startingPos, 20, 15)
	--Cmd_Ability(sg_units, BP_GetAbilityBlueprint("core_formation_line"))
	--Cmd_FormationMove(sg_units, move_position, false)
end

function InternalCustomOptions_GetVillager(player_civ)
	local sbp_unit
	if player_civ == "english" then
		sbp_unit = BP_GetSquadBlueprint("unit_villager_1_eng")
	elseif player_civ == "chinese" then
		sbp_unit = BP_GetSquadBlueprint("unit_villager_1_chi")
	elseif player_civ == "french" then
		sbp_unit = BP_GetSquadBlueprint("unit_villager_1_fre")
	elseif player_civ == "hre" then
		sbp_unit = BP_GetSquadBlueprint("unit_villager_1_hre")
	elseif player_civ == "mongol" then
		sbp_unit = BP_GetSquadBlueprint("unit_villager_1_mon")
	elseif player_civ == "rus" then
		sbp_unit = BP_GetSquadBlueprint("unit_villager_1_rus")
	elseif player_civ == "sultanate" then
		sbp_unit = BP_GetSquadBlueprint("unit_villager_1_sul")
	elseif player_civ == "abbasid" then
		sbp_unit = BP_GetSquadBlueprint("unit_villager_1_abb")
	end
	return sbp_unit
end
function InternalCustomOptions_GetScout(player_civ)
	local sbp_unit
	if player_civ == "english" then
		sbp_unit = BP_GetSquadBlueprint("unit_scout_1_eng")
	elseif player_civ == "chinese" then
		sbp_unit = BP_GetSquadBlueprint("unit_scout_1_chi")
	elseif player_civ == "french" then
		sbp_unit = BP_GetSquadBlueprint("unit_scout_1_fre")
	elseif player_civ == "hre" then
		sbp_unit = BP_GetSquadBlueprint("unit_scout_1_hre")
	elseif player_civ == "mongol" then
		sbp_unit = BP_GetSquadBlueprint("unit_khan_1_mon")
	elseif player_civ == "rus" then
		sbp_unit = BP_GetSquadBlueprint("unit_scout_1_rus")
	elseif player_civ == "sultanate" then
		sbp_unit = BP_GetSquadBlueprint("unit_scout_1_sul")
	elseif player_civ == "abbasid" then
		sbp_unit = BP_GetSquadBlueprint("unit_scout_1_abb")
	end
	return sbp_unit
end
function InternalCustomOptions_GetSheep(player_civ)
	return BP_GetSquadBlueprint("gaia_herdable_sheep")
end
function InternalCustomOptions_GetOther(player_civ)
	if player_civ == "mongol" then
		sbp_unit = BP_GetSquadBlueprint("building_town_center_capital_moving_mon")
	end
end


-- Global event callback for GE_UpgradeComplete
--	Rule_AddGlobalEvent(CustomOptions_GameSpeedRule, GE_UpgradeComplete)
--	Rule_RemoveGlobalEvent(StandardMode_OnUpdateComplete)
--function AdvancedMode_OnUpdateComplete(context)	
--
--	for _, player in pairs(PLAYERS) do
--		if Player_GetRaceName(player.id) == "abbasid" then
--			-- nerf abbassids and their age up
--			if _match.options.section_custom_conditions and 
--				_match.options.section_custom_conditions.option_max_age and
--				Player_GetCurrentAge(player.id) == _match.custom.max_age then
--				-- get max age allowed
--				set_abbasids_age_limit(player)
--				--Player_SetUpgradeAvailability(player.id, ,ITEM_LOCKED)
--			end
--		end
--	end
--end