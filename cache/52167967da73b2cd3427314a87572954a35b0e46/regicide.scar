-----------------------------------------------------------------------
--
-- Regicide Win Condition 
--	
-- Edit of Regicide mode provided by relic
--
-- (c) Relic Entertainment 2022
--
-----------------------------------------------------------------------

-- Provide data to replay system through this script
import("replay/replaystatviewer.scar")

-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

if _regicide==nil then
	_regicide = {
		module = "Regicide",
		objective_title = "$11218487", 
		last_man_standing = false, -- false = fixed teams, true = dynamic diplomacy (i.e. only 1 player can win).
		objective_requirement = 1,
		icons = {
			objective = "icons\\objectives\\objectives_leader",
			alert = "icons\\event_queue_high_priority_large",
		},
	}

end

-----------------------------------------------------------------------
-- Scripting framework 
-----------------------------------------------------------------------

Core_RegisterModule(_regicide.module)

-----------------------------------------------------------------------
-- Callbacks
-----------------------------------------------------------------------

-- Called during load as part of the game setup sequence
function Regicide_OnGameSetup()
	
end

-- Called when local player is changed
function Regicide_OnLocalPlayerChanged(context)
	
	player_local = Core_GetPlayersTableEntry(context.player)
	
end

-- Called before initialization, preceding other module OnInit functions
function Regicide_PreInit()
	
end

-- Called on match initialization before handing control to the player
function Regicide_OnInit()	
	-- Get local player so we can reference it later
	player_local = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
	Rule_AddGlobalEvent(Regicide_OnLocalPlayerChanged, GE_LocalPlayerChanged)
	
	
	
	-- CALLING FUNCTIONS: The following calls the Mod_FindTownCenter() and Mod_SpawnBuilding() functions directly and immediately.
	Regicide_FindTownCenter()
	CustomOptions_SpawnKeeps()
	CustomOptions_SpawnKings()
	
	Regicide_InitWinCondition()
end

-- Called after initialization is done when game is fading up from black
function Regicide_Start()
	
	-- Setup the player's objective UI by calling the below function directly
	Regicide_AddObjective()
	
end

-- Called when Core_SetPlayerDefeated() is invoked. Signals that a player has been eliminated from play due to defeat.
function Regicide_OnPlayerDefeated(player, reason)
	
end

-- When a victory condition is met, a module must call Core_OnGameOver() in order to invoke this delegate and notify all modules that the match is about to end. Generally used for clean up (removal of rules, objectives, and UI elements specific to the module).
function Regicide_OnGameOver()
	-- It is good practice to remove any Rules that were configured so they do not continue to run after the match has concluded
	Rule_RemoveGlobalEvent(Regicide_OnLocalPlayerChanged)
	Rule_RemoveGlobalEvent(Regicide_WinCondition_OnKingDeath)
	Rule_Remove(WinCondition_CheckSurrender)

end

function Regicide_InitWinCondition()
	-- Add a rule that will get called periodically to check if the win condition has been met.
	-- Activate the losing condition on King Death
	Rule_AddGlobalEvent(Regicide_WinCondition_OnKingDeath, GE_EntityKilled)
	Rule_AddInterval(WinCondition_CheckSurrender, 3)
end

function Regicide_WinCondition_OnKingDeath(context)
	if Entity_IsOfType(context.victim, "King") then
		Core_SetPlayerDefeated(context.victimOwner, Annihilation_LoserPresentation, WR_ANNIHILATION)
	end
end

-----------------------------------------------------------------------
-- Mod Functions
-----------------------------------------------------------------------

-- This function creates the objective UI that appears in the top-left corner of each player's screen
function Regicide_AddObjective()
	
	-- Check if an objective has not been created yet
	if _regicide.objective == nil then 
		
		-- Create and store objective in the global table created at the start of this script
		_regicide.objective = Obj_Create(player_local.id, _regicide.objective_title, Loc_Empty(), _regicide.icons.objective, "ConquestObjectiveTemplate", player_local.raceName, OT_Primary, 0, "conquestObj")		
		
		-- Sets the objective's state to incomplete
		Obj_SetState(_regicide.objective, OS_Incomplete)
		-- Sets the objective to visible so players can see it
		Obj_SetVisible(_regicide.objective, true)
		-- Sets the progress element of the objective to visible so players can see it
		--Obj_SetProgressVisible(_mod.objective, true)		
		-- Sets the objective progress type to a counter
		--Obj_SetCounterType(_mod.objective, COUNTER_CountUpTo)
		-- Set the starting objective progress to 1 because we spawn a House for the player in Mod_SpawnBuilding()
		--Obj_SetCounterCount(_mod.objective, 1)
		-- Set the maximum objective progress
		--Obj_SetCounterMax(_mod.objective, _mod.objective_requirement)
		-- Set the objective progress bar percentage value
		--Obj_SetProgress(_mod.objective, 1 / _mod.objective_requirement)
	end
end

-- This function finds the starting Town Center for all players in the match
function Regicide_FindTownCenter()
	
	for i, player in pairs(PLAYERS) do
		local eg_player_entities = Player_GetEntities(player.id)
		EGroup_Filter(eg_player_entities, "town_center", FILTER_KEEP)
		local entity =  EGroup_GetEntityAt(eg_player_entities, 1)
		local entity_id = Entity_GetID(entity) 
		local position = Entity_GetPosition(entity)
		
		-- Store the player's Town Center information so it can be referenced later
		player.town_center = {
			entity = entity,
			entity_id = entity_id,
			position = position,
		}		
	end
end


-----------------------------------------------------------------------
-- Standard Functions
-----------------------------------------------------------------------

function WinCondition_CheckSurrender()
	local results = {}
	for i = 1, World_GetPlayerCount() do
		local player = World_GetPlayerAt(i)
		local team = Player_GetTeam(player)	
		
		results[team] = results[team] or { surrender_count = 0 }
		
		-- If any player on a team has surrendered, that team loses.
		if Player_IsSurrendered(player) then
			results[team].surrender_count = results[team].surrender_count + 1
		end
	end
	
	-- Check if any team has surrendered.
	for team, result in pairs(results) do
		if result.surrender_count > 0 then
			Rule_RemoveAll()
			
			-- We have a winner!
			local losingTeam = team
			local winningTeam = Team_GetEnemyTeam(losingTeam)
			
			World_SetTeamWin(winningTeam, -1)
		end
	end
end


--[[
function Mod_WinCondition_CheckKing()
	for i = 1, World_GetPlayerCount() do
		local player = World_GetPlayerAt(i)
		
		
		local num_squads = Player_GetEntityCountByUnitType(player, "king")
		if num_squads <= 0 then
			Core_SetPlayerDefeated(player, Annihilation_LoserPresentation, WR_ANNIHILATION)
		end
	end
end
]]--


