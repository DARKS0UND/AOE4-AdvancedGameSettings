-----------------------------------------------------------------------
--
-- Regicide Win Condition 
--	
-- Edit of Regicide mode provided by relic
--
-- (c) Relic Entertainment 2022
--
-----------------------------------------------------------------------

-- Provide data to replay system through this script
import("replay/replaystatviewer.scar")

-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

if _regicide==nil then
	_regicide = {
		module = "Regicide",
		objective_title = "$11218487", 
		last_man_standing = false, -- false = fixed teams, true = dynamic diplomacy (i.e. only 1 player can win).
		objective_requirement = 1,
		icons = {
			objective = "icons\\objectives\\objectives_leader",
			alert = "icons\\event_queue_high_priority_large",
		},
	}

end

-----------------------------------------------------------------------
-- Scripting framework 
-----------------------------------------------------------------------

Core_RegisterModule(_regicide.module)

-----------------------------------------------------------------------
-- Callbacks
-----------------------------------------------------------------------

-- Called during load as part of the game setup sequence
function Regicide_OnGameSetup()
	
end

-- Called when local player is changed
function Regicide_OnLocalPlayerChanged(context)
	
	player_local = Core_GetPlayersTableEntry(context.player)
	
end

-- Called before initialization, preceding other module OnInit functions
function Regicide_PreInit()
	
end

-- Called on match initialization before handing control to the player
function Regicide_OnInit()	
	-- Get local player so we can reference it later
	player_local = Core_GetPlayersTableEntry(Game_GetLocalPlayer())
	Rule_AddGlobalEvent(Regicide_OnLocalPlayerChanged, GE_LocalPlayerChanged)
	
	
	
	-- CALLING FUNCTIONS: The following calls the Mod_FindTownCenter() and Mod_SpawnBuilding() functions directly and immediately.
	Regicide_FindTownCenter()
	Regicide_SpawnBuilding()
	Regicide_SpawnUnits()
	
	Regicide_InitWinCondition()
end

-- Called after initialization is done when game is fading up from black
function Regicide_Start()
	
	-- Setup the player's objective UI by calling the below function directly
	Regicide_AddObjective()
	
end

-- Called when Core_SetPlayerDefeated() is invoked. Signals that a player has been eliminated from play due to defeat.
function Regicide_OnPlayerDefeated(player, reason)
	
end

-- When a victory condition is met, a module must call Core_OnGameOver() in order to invoke this delegate and notify all modules that the match is about to end. Generally used for clean up (removal of rules, objectives, and UI elements specific to the module).
function Regicide_OnGameOver()
	-- It is good practice to remove any Rules that were configured so they do not continue to run after the match has concluded
	Rule_RemoveGlobalEvent(Regicide_OnLocalPlayerChanged)
	Rule_RemoveGlobalEvent(Regicide_WinCondition_OnKingDeath)
	Rule_Remove(WinCondition_CheckSurrender)

end

function Regicide_InitWinCondition()
	-- Add a rule that will get called periodically to check if the win condition has been met.
	-- Activate the losing condition on King Death
	Rule_AddGlobalEvent(Regicide_WinCondition_OnKingDeath, GE_EntityKilled)
	Rule_AddInterval(WinCondition_CheckSurrender, 3)
end

function Regicide_WinCondition_OnKingDeath(context)
	if Entity_IsOfType(context.victim, "King") then
		Core_SetPlayerDefeated(context.victimOwner, Annihilation_LoserPresentation, WR_ANNIHILATION)
	end
end

-----------------------------------------------------------------------
-- Mod Functions
-----------------------------------------------------------------------

-- This function creates the objective UI that appears in the top-left corner of each player's screen
function Regicide_AddObjective()
	
	-- Check if an objective has not been created yet
	if _regicide.objective == nil then 
		
		-- Create and store objective in the global table created at the start of this script
		_regicide.objective = Obj_Create(player_local.id, _regicide.objective_title, Loc_Empty(), _regicide.icons.objective, "ConquestObjectiveTemplate", player_local.raceName, OT_Primary, 0, "conquestObj")		
		
		-- Sets the objective's state to incomplete
		Obj_SetState(_regicide.objective, OS_Incomplete)
		-- Sets the objective to visible so players can see it
		Obj_SetVisible(_regicide.objective, true)
		-- Sets the progress element of the objective to visible so players can see it
		--Obj_SetProgressVisible(_mod.objective, true)		
		-- Sets the objective progress type to a counter
		--Obj_SetCounterType(_mod.objective, COUNTER_CountUpTo)
		-- Set the starting objective progress to 1 because we spawn a House for the player in Mod_SpawnBuilding()
		--Obj_SetCounterCount(_mod.objective, 1)
		-- Set the maximum objective progress
		--Obj_SetCounterMax(_mod.objective, _mod.objective_requirement)
		-- Set the objective progress bar percentage value
		--Obj_SetProgress(_mod.objective, 1 / _mod.objective_requirement)
	end
end

-- This function finds the starting Town Center for all players in the match
function Regicide_FindTownCenter()
	
	-- This is a for loop that does something for each player in the match.
	-- PLAYERS is a table that contains all of the players in the match.
	-- If there are two players it will run twice, if there are eight players it will run eight times, etc.
	for i, player in pairs(PLAYERS) do
		
		-- Get the player's entities and place them into an ENTITY GROUP
		-- Filter out everything in the ENTITY GROUP except for the Town Center
		-- Get the Town Center ENTITY by getting the first entry in the ENTITY GROUP we just filtered
		-- Get the Town Center's ENTITY ID
		-- Some functions require the ENTITY ID to perform an action on the ENTITY
		-- Get the Town Center's position
		local eg_player_entities = Player_GetEntities(player.id)
		EGroup_Filter(eg_player_entities, "town_center", FILTER_KEEP)
		local entity =  EGroup_GetEntityAt(eg_player_entities, 1)
		local entity_id = Entity_GetID(entity) 
		local position = Entity_GetPosition(entity)
		
		-- Store the player's Town Center information so it can be referenced later
		player.town_center = {
			entity = entity,
			entity_id = entity_id,
			position = position,
		}		
	end
end

-- This function spawns a building next to each player's Town Center
function Regicide_SpawnBuilding()
	
	-- This is a for loop that does something for each player in the match.
	-- PLAYERS is a table that contains all of the players in the match.
	-- If there are two players it will run twice, if there are eight players it will run eight times, etc.
	for i, player in pairs(PLAYERS) do
		
		-- Get player's Civilization name
		-- Create a local variable for the Fort BLUEPRINT (BP) we are going to find below
		-- The local variable needs to be established before the below IF statement so it can be referenced outside of it within the function
		-- This checks which Civilization the player is using and gets the appropriate BLUEPRINTS for the House building
		-- BLUEPRINTS are the instructions needed to create a SQUAD, ENTITY, or UPGRADE
		local player_civ = Player_GetRaceName(player.id)
		
		local ebp_building
		
		if player_civ == "english" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_eng")			
		elseif player_civ == "chinese" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_chi")			
		elseif player_civ == "french" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_fre")			
		elseif player_civ == "hre" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_hre")			
		elseif player_civ == "mongol" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_control_nov")			
		elseif player_civ == "rus" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_control_rus")			
		elseif player_civ == "sultanate" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_control_sul")			
		elseif player_civ == "abbasid" then
			ebp_building = BP_GetEntityBlueprint("building_defense_keep_control_abb")			
		end
		
		-- Get a position offset from the player's Town Center
		-- Create a new ENTITY using the ENTITY BLUEPRINT (EBP) we found above at the location we calculated above
		local spawn_position = Util_GetOffsetPosition(player.town_center.position, 10, 20)
		local entity = Entity_Create(ebp_building, player.id, spawn_position, false)
		-- Spawn the ENTITY
		-- Construct the ENTITY immediately
		-- Snap the ENTITY to the construction grid
		Entity_Spawn(entity)
		Entity_ForceConstruct(entity)
		Entity_SnapToGridAndGround(entity, false)	
	end
end

-- This function spawns a king next each player's Town Center
function Regicide_SpawnUnits()
	
	-- This is a for loop that does something for each player in the match.
	-- PLAYERS is a table that contains all of the players in the match.
	-- If there are two players it will run twice, if there are eight players it will run eight times, etc.
	for i, player in pairs(PLAYERS) do
		
		-- Get player's Civilization name		
		-- Create a local variable for the Spearman BLUEPRINT (BP) we are going to find below
		-- The local variable needs to be established before the below IF statement so it can be referenced outside of it within the function		
		-- This checks which Civilization the player is using and gets the appropriate BLUEPRINTS for the Spearmen unit
		-- BLUEPRINTS are the instructions needed to create a SQUAD, ENTITY, or UPGRADE
		local player_civ = Player_GetRaceName(player.id)
		
		local sbp_king
		if player_civ == "english" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_eng")
		elseif player_civ == "chinese" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_chi")
		elseif player_civ == "french" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_fre")
		elseif player_civ == "hre" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_hre")
		elseif player_civ == "mongol" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_mon")
		elseif player_civ == "rus" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_rus")
		elseif player_civ == "sultanate" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_sul")
		elseif player_civ == "abbasid" then
			sbp_king = BP_GetSquadBlueprint("unit_king_1_abb")
			
		end
		
		-- Get a position offset from the player's Town Center
		-- Create a unique sgroup name for this player's spearmen units
		-- Create a SQUAD GROUP (SGROUP) that will act as a container for the spawned SQUADS
		-- SGROUPS are useful for controlling all of the spawned units at once via scripted commands.
		-- This function spawns 16 Spearmen of the player's Civilization near their starting Town Center
		-- You can hover over the function to view the parameters it requires. From left to right:
		-- player = The player that the spawned units will belong to.
		-- sgroup = The SQUAD GROUP (SG) that the units will be spawned into.
		-- units = A table of data that contains the SQUAD BLUEPRINT (SBP) and the number of SQUADS (aka units) to spawn.
		-- spawn = The location the units will be spawned at.
		local spawn_position = Util_GetOffsetPosition(player.town_center.position, 20, 10)
		
		local sgroup_name = "sg_player_spearmen_" .. tostring(player.id)
		local sg_player_king = SGroup_CreateIfNotFound(sgroup_name)
		
		UnitEntry_DeploySquads(player.id, sg_player_king, {{sbp = sbp_king, numSquads = 1 }}, spawn_position)
		
		-- Get a position offset from the Town Center position
		local move_position = Util_GetOffsetPosition(player.town_center.position, 20, 15)
		-- Command the SGROUP to enter into a formation
		Cmd_Ability(sg_player_king, BP_GetAbilityBlueprint("core_formation_line"))
		-- Command the SGROUP to Move to that position
		Cmd_FormationMove(sg_player_king, move_position, false)
		
	end
end

-----------------------------------------------------------------------
-- Standard Functions
-----------------------------------------------------------------------

function WinCondition_CheckSurrender()
	local results = {}
	for i = 1, World_GetPlayerCount() do
		local player = World_GetPlayerAt(i)
		local team = Player_GetTeam(player)	
		
		results[team] = results[team] or { surrender_count = 0 }
		
		-- If any player on a team has surrendered, that team loses.
		if Player_IsSurrendered(player) then
			results[team].surrender_count = results[team].surrender_count + 1
		end
	end
	
	-- Check if any team has surrendered.
	for team, result in pairs(results) do
		if result.surrender_count > 0 then
			Rule_RemoveAll()
			
			-- We have a winner!
			local losingTeam = team
			local winningTeam = Team_GetEnemyTeam(losingTeam)
			
			World_SetTeamWin(winningTeam, -1)
		end
	end
end


--[[
function Mod_WinCondition_CheckKing()
	for i = 1, World_GetPlayerCount() do
		local player = World_GetPlayerAt(i)
		
		
		local num_squads = Player_GetEntityCountByUnitType(player, "king")
		if num_squads <= 0 then
			Core_SetPlayerDefeated(player, Annihilation_LoserPresentation, WR_ANNIHILATION)
		end
	end
end
]]--


